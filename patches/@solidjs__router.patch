diff --git a/dist/routing.js b/dist/routing.js
index 9477639bcb9958680e10361f84ba7f2cbb8e807f..1c020c8caed9044f2ae74b8af44321b5a36a9869 100644
--- a/dist/routing.js
+++ b/dist/routing.js
@@ -2,7 +2,7 @@ import { runWithOwner, batch } from "solid-js";
 import { createComponent, createContext, createMemo, createRenderEffect, createSignal, on, onCleanup, untrack, useContext, startTransition, resetErrorBoundaries } from "solid-js";
 import { isServer, getRequestEvent } from "solid-js/web";
 import { createBeforeLeave } from "./lifecycle.js";
-import { mockBase, createMemoObject, extractSearchParams, invariant, resolvePath, createMatcher, joinPaths, scoreRoute, mergeSearchString, expandOptionals } from "./utils.js";
+import { mockBase, createMemoObject, createMemoWithoutProxy, extractSearchParams, invariant, resolvePath, createMatcher, joinPaths, scoreRoute, mergeSearchString, expandOptionals } from "./utils.js";
 const MAX_REDIRECTS = 100;
 export const RouterContextObj = createContext();
 export const RouteContextObj = createContext();
@@ -248,14 +248,38 @@ export function createRouterContext(integration, branches, getContext, options =
         }
         return getRouteMatches(branches(), location.pathname);
     });
-    const params = createMemoObject(() => {
+    const collectDynamicParams =(branches) => {
+        const dynamicParams= [];
+    
+        branches.forEach(branch => {
+          branch.routes.forEach(route => {
+            if (route.pattern) {
+              const matches = route.pattern.match(/:(\w+)/g);
+              if (matches) {
+                matches.forEach(param => {
+                  const p = param.slice(1); // Remove the `:`
+                  if (!dynamicParams.includes(p))
+                    dynamicParams.push(p)
+                });
+              }
+            }
+          });
+        });
+    
+        return dynamicParams;
+      }
+    
+      const SUPPORTS_PROXY = typeof Proxy === "function";
+      const paramsHandler = () => {
         const m = matches();
         const params = {};
         for (let i = 0; i < m.length; i++) {
             Object.assign(params, m[i].params);
         }
         return params;
-    });
+    };
+    const params = SUPPORTS_PROXY ? createMemoObject(paramsHandler) : createMemoWithoutProxy(paramsHandler, collectDynamicParams(branches()));
+
     const baseRoute = {
         pattern: basePath,
         path: () => basePath,
diff --git a/dist/utils.js b/dist/utils.js
index fec17645ae81b9fc80252430d07481ea616c3aa3..601332ad2a9fd85e1ef5ede020510e7020c875fd 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -156,3 +156,33 @@ export function expandOptionals(pattern) {
     }
     return expandOptionals(suffix).reduce((results, expansion) => [...results, ...prefixes.map(p => p + expansion)], []);
 }
+
+export function createMemoWithoutProxy(fn, allKeys) {
+    const map = new Map();
+    const owner = getOwner();
+    const target = {};
+  
+    const handler = (property) => {
+      if (!map.has(property)) {
+        runWithOwner(owner, () =>
+          map.set(
+            property,
+            createMemo(() => fn()[property])
+          )
+        );
+      }
+      return map.get(property)();
+    };
+  
+    const keys = allKeys ? allKeys : Object.keys(fn()) || [];
+  
+    keys.forEach((key) => {
+      Object.defineProperty(target, key, {
+        get: () => handler(key),
+        enumerable: true,
+        configurable: true,
+      });
+    });
+  
+    return target;
+  }
