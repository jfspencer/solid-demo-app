{"version":3,"file":"Loops-legacy-DGrT4Z9k.js","sources":["../../node_modules/.pnpm/@lightningtv+solid@2.7.8_@lightningjs+renderer@2.13.0_@solidjs+router@0.15.3_patch_hash=hnhvc_j2dbu7s43oiapm3sbrx6morz7u/node_modules/@lightningtv/solid/src/primitives/LazyUp.tsx","../../src/pages/Loops.tsx"],"sourcesContent":["import {\n  Index,\n  createEffect,\n  createMemo,\n  createSignal,\n  splitProps,\n  Show,\n  type JSX,\n  type ValidComponent,\n} from 'solid-js';\nimport { Dynamic, type ElementNode } from '@lightningtv/solid';\n\nexport function LazyUp<T extends readonly any[], U extends JSX.Element>(\n  props: T &\n    ElementNode & {\n      each: T | undefined | null | false;\n      fallback?: JSX.Element;\n      container?: JSX.Element;\n      component?: ValidComponent;\n      direction?: 'row' | 'column';\n      upCount: number;\n      children: (item: T[number], index: number) => U;\n    },\n) {\n  const [p, others] = splitProps(props, [\n    'component',\n    'each',\n    'fallback',\n    'children',\n  ]);\n\n  const [offset, setOffset] = createSignal(0);\n\n  createEffect(() => {\n    setOffset(props.selected || 0);\n  });\n\n  const items = createMemo(() => {\n    if (p.each) {\n      return p.each.slice(0, props.upCount + offset());\n    }\n  });\n\n  console.log('LazyUp is deprecated. Please use LazyRow or LazyColumn instead.');\n\n  const isRow = createMemo(() => {\n    return (\n      others.direction !== undefined && others.direction === 'row' ||\n      others.style?.flexDirection === 'row' ||\n      others.flexDirection === 'row'\n    );\n  });\n\n  const keyHandlers = createMemo(() => {\n    const updateOffset = () => {\n      setOffset(\n        (prev) => p.each && Math.min(prev + 1, p.each.length - props.upCount),\n      );\n    };\n\n    return isRow() ? { onRight: updateOffset } : { onDown: updateOffset };\n  });\n\n  return (\n    <Show when={items()}>\n      <Dynamic component={p.component} {...others} {...keyHandlers()}>\n        <Index each={items()} fallback={p.fallback} children={p.children} />\n      </Dynamic>\n    </Show>\n  );\n}\n","import { createEffect, on, createSignal, For, Index } from \"solid-js\";\nimport { ElementNode, View, Text } from \"@lightningtv/solid\";\nimport { LazyUp, Column, Row } from \"@lightningtv/solid/primitives\";\nimport { List } from \"@solid-primitives/list\";\nimport { Poster } from \"../components\";\nimport { setGlobalBackground } from \"../state\";\n\nconst Loops = (props) => {\n  const [activeRow, setActiveRow] = createSignal(props.data.rows[0]);\n\n  let contentBlock, currentIndex = 0,\n    solidLogo;\n\n    setGlobalBackground(\"#000000\");\n\n  const titleRowStyles = {\n    fontFamily: \"Raleway\",\n    fontSize: 24,\n    height: 32,\n    lineHeight: 32,\n  };\n\n  function switchRow(e) {\n    if (e.key === \"[\") {\n      currentIndex = Math.max(0, currentIndex - 1);\n    }\n    if (e.key === \"]\") {\n      currentIndex = Math.min(props.data.rows.length - 1, currentIndex + 1);\n    }\n\n    if (e.key === \"\\\\\") {\n      const row = props.data.rows[0];\n      const items = row.items().slice().reverse();\n      row.setItems(items);\n      return;\n    }\n\n    setActiveRow(props.data.rows[currentIndex]);\n  }\n\n  return (\n    <>\n      <View\n        ref={solidLogo}\n        width={300}\n        height={150}\n        x={162}\n        y={80}\n        zIndex={105}\n      >\n        <Text x={80} fontSize={28} color={0xf6f6f699}>\n          Built With:\n        </Text>\n        <View y={32} src=\"./assets/solidWord.png\" width={280} height={52} />\n\n        <View x={0} y={110} src=\"./assets/tmdb.png\" width={80} height={41} />\n        <Text\n          x={90}\n          y={110}\n          contain=\"width\"\n          width={160}\n          fontSize={12}\n          color={0xf6f6f699}\n        >\n          This product uses the TMDB API but is not endorsed or certified by\n          TMDB.\n        </Text>\n      </View>\n      <Column autofocus={activeRow()?.items()} y={240} onKeyPress={switchRow}>\n        <View x={160} height={300} forwardFocus={1} marginTop={30}>\n          <Text skipFocus style={titleRowStyles}>\n            For Loop\n          </Text>\n          <Row gap={20} y={40} display=\"block\">\n            <For each={activeRow()?.items()}>\n            {(item, index) => (\n              <Poster x={index() * 210} {...item} />\n            )}\n            </For>\n          </Row>\n        </View>\n\n        <View x={160} height={300} forwardFocus={1} marginTop={30}>\n          <Text skipFocus style={titleRowStyles}>\n            Map Loop\n          </Text>\n          <Row gap={20} y={40} display=\"block\">\n            {activeRow()?.items()?.map((item, index) => (\n              <Poster x={index * 210} {...item} />\n            ))}\n          </Row>\n        </View>\n        \n\n        <View x={160} height={300} forwardFocus={1} marginTop={30}>\n          <Text skipFocus style={titleRowStyles}>\n            Index Loop\n          </Text>\n          <Row gap={20} y={40} display=\"block\">\n            <Index each={activeRow()?.items()}>\n            {(item, index) => (\n              <Poster x={index * 210} {...item()} />\n            )}\n            </Index>\n          </Row>\n        </View>\n\n        <View x={160} height={300} forwardFocus={1} marginTop={30}>\n          <Text skipFocus style={titleRowStyles}>\n            LazyUp Loop\n          </Text>\n          <LazyUp\n            component={Row}\n            direction=\"row\"\n            display=\"block\"\n            gap={20}\n            upCount={5}\n            each={activeRow()?.items()}\n            y={50}\n          >\n            {(item, index) => (\n              <Poster x={index * 210} {...item()} />\n            )}\n          </LazyUp>\n        </View>\n\n        <View x={160} height={300} forwardFocus={1} marginTop={30}>\n          <Text skipFocus style={titleRowStyles}>\n            List Loop\n          </Text>\n          <Row gap={20} y={40} display=\"block\">\n            <List each={activeRow()?.items()}>\n            {(item, index) => (\n              <Poster x={index() * 210} {...item()} transition={{ x: { duration: 5550 } }} />\n            )}\n            </List>\n          </Row>\n        </View>\n      </Column>\n    </>\n  );\n};\n\nexport default Loops;\n"],"names":["LazyUp","props","_splitProps","splitProps","_splitProps2","_slicedToArray","p","others","_createSignal","createSignal","_createSignal2","offset","setOffset","createEffect","selected","items","createMemo","each","slice","upCount","console","log","isRow","_others$style","direction","undefined","style","flexDirection","keyHandlers","updateOffset","prev","Math","min","length","onRight","onDown","_$createComponent","Show","when","children","Dynamic","_$mergeProps","component","Index","fallback","Loops","_createSignal3","data","rows","_createSignal4","activeRow","setActiveRow","contentBlock","currentIndex","solidLogo","setGlobalBackground","titleRowStyles","fontFamily","fontSize","height","lineHeight","switchRow","e","key","max","row","reverse","setItems","View","ref","r$","_ref$","width","x","y","zIndex","Text","color","src","contain","Column","autofocus","_activeRow","onKeyPress","forwardFocus","marginTop","skipFocus","Row","gap","display","For","_activeRow2","item","index","Poster","_activeRow3","map","_activeRow4","_activeRow5","List","_activeRow6","transition","duration"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYO,SAASA,OACdC,KAUA,EAAA;UACM,IAAAC,WAAA,GAAcC,UAAAA,CAAWF,KAAO,EAAA,CACpC,WACA,EAAA,MAAA,EACA,UACA,EAAA,UAAU,CACX,CAAA;YAAAG,YAAA,GAAAC,cAAA,CAAAH,WAAA;YALMI,CAAGC,GAAAA,YAAAA;YAAAA,MAAM,GAAAH,YAAA;UAOhB,IAAAI,aAAA,GAA4BC,aAAa,CAAC,CAAA;YAAAC,cAAA,GAAAL,cAAA,CAAAG,aAAA;YAAnCG,MAAAA,GAAAA,cAAAA;YAAQC,SAAS,GAAAF,cAAA;UAExBG,YAAAA,CAAa,YAAM;YACPZ,SAAAA,CAAAA,KAAAA,CAAMa,YAAY,CAAC,CAAA;UAAA,CAC9B,CAAA;UAEKC,IAAAA,KAAAA,GAAQC,WAAW,YAAM;YAC7B,IAAIV,EAAEW,IAAM,EAAA;cACV,OAAOX,EAAEW,IAAKC,CAAAA,KAAAA,CAAM,GAAGjB,KAAMkB,CAAAA,OAAAA,GAAUR,QAAQ,CAAA;YAAA;UACjD,CACD,CAAA;UAEDS,OAAAA,CAAQC,IAAI,iEAAiE,CAAA;UAEvEC,IAAAA,KAAAA,GAAQN,WAAW,YAAM;YAAA,IAAAO,aAAA;YAE3BhB,OAAAA,MAAAA,CAAOiB,SAAcC,KAAAA,SAAAA,IAAalB,MAAOiB,CAAAA,SAAAA,KAAc,KACvDjB,IAAAA,EAAAA,aAAAA,GAAAA,MAAAA,CAAOmB,KAAOC,cAAAA,aAAAA,uBAAdpB,aAAAA,CAAcoB,aAAAA,MAAkB,KAChCpB,IAAAA,MAAAA,CAAOoB,aAAkB,KAAA,KAAA;UAAA,CAE5B,CAAA;UAEKC,IAAAA,WAAAA,GAAcZ,WAAW,YAAM;YACnC,IAAMa,eAAeA,SAAfA,eAAqB;cACzBjB,SAAAA,CACGkB,UAASxB,IAAAA;gBAAAA,OAAAA,CAAAA,CAAEW,IAAQc,IAAAA,IAAAA,CAAKC,GAAIF,CAAAA,IAAAA,GAAO,CAAGxB,EAAAA,CAAAA,CAAEW,IAAKgB,CAAAA,MAAAA,GAAShC,KAAMkB,CAAAA,OAAO,CACtE;cAAA,EAAA;YACF,CAAA;YAEA,OAAOG,OAAU,GAAA;cAAEY,OAASL,EAAAA;YAAAA,CAAiB,GAAA;cAAEM,MAAQN,EAAAA;YAAa,CAAA;UAAA,CACrE,CAAA;UAED,OAAAO,gBACGC,IAAI,EAAA;YAAA,IAACC,IAAIA,CAAA,EAAA;cAAA,OAAEvB,KAAM,CAAA,CAAA;YAAC,CAAA;YAAA,IAAAwB,QAAAA,CAAA,EAAA;cAAAH,OAAAA,eAAAA,CAChBI,SAAOC,UAAA,CAAA;gBAAA,IAACC,SAASA,CAAA,EAAA;kBAAA,OAAEpC,CAAEoC,CAAAA,SAAAA;gBAAAA;cAAS,CAAA,EAAMnC,QAAYqB,WAAW,EAAA;gBAAA,IAAAW,QAAAA,CAAA,EAAA;kBAAA,OAAAH,gBACzDO,KAAK,EAAA;oBAAA,IAAC1B,IAAIA,CAAA,EAAA;sBAAA,OAAEF,KAAM,CAAA,CAAA;oBAAC,CAAA;oBAAA,IAAE6B,QAAQA,CAAA,EAAA;sBAAA,OAAEtC,CAAEsC,CAAAA,QAAAA;oBAAQ,CAAA;oBAAA,IAAEL,QAAQA,CAAA,EAAA;sBAAA,OAAEjC,CAAEiC,CAAAA,QAAAA;oBAAAA;kBAAQ,CAAA,CAAA;gBAAA;cAAA,CAAA,CAAA,CAAA;YAAA;UAAA,CAAA,CAAA;QAIxE;QC/DA,IAAMM,2BAAS5C,UAAUA,KAAA,EAAA;UACjB,IAAA6C,cAAA,GAA4BrC,aAAaR,KAAM8C,CAAAA,IAAAA,CAAKC,IAAK,CAAA,CAAC,CAAC,CAAA;YAAAC,cAAA,GAAA5C,cAAA,CAAAyC,cAAA;YAA1DI;YAAWC,YAAY,GAAAF,cAAA;UAE1BG,IAAcC,eAAe,CAC/BC;YAAAA,SAAAA;UAEAC,mBAAAA,CAAoB,UAAS,CAAA;UAE/B,IAAMC,cAAiB,GAAA;YACrBC,UAAY,EAAA,SAAA;YACZC,QAAU,EAAA,EAAA;YACVC,MAAQ,EAAA,EAAA;YACRC,UAAY,EAAA;UACd,CAAA;UAEA,SAASC,UAAUC,CAAG,EAAA;YAChBA,IAAAA,CAAAA,CAAEC,QAAQ,GAAK,EAAA;cACjBV,YAAAA,GAAetB,IAAKiC,CAAAA,GAAAA,CAAI,CAAGX,EAAAA,YAAAA,GAAe,CAAC,CAAA;YAAA;YAEzCS,IAAAA,CAAAA,CAAEC,QAAQ,GAAK,EAAA;cACFhC,YAAAA,GAAAA,IAAAA,CAAKC,IAAI/B,KAAM8C,CAAAA,IAAAA,CAAKC,KAAKf,MAAS,GAAA,CAAA,EAAGoB,eAAe,CAAC,CAAA;YAAA;YAGlES,IAAAA,CAAAA,CAAEC,QAAQ,IAAM,EAAA;cAClB,IAAME,GAAMhE,GAAAA,KAAAA,CAAM8C,IAAKC,CAAAA,IAAAA,CAAK,CAAC,CAAA;cAC7B,IAAMjC,QAAQkD,GAAIlD,CAAAA,KAAAA,CAAQG,CAAAA,CAAAA,KAAAA,CAAAA,EAAQgD,OAAQ,CAAA,CAAA;cAC1CD,GAAAA,CAAIE,SAASpD,KAAK,CAAA;cAClB;YAAA;YAGFoC,YAAAA,CAAalD,KAAM8C,CAAAA,IAAAA,CAAKC,IAAKK,CAAAA,YAAY,CAAC,CAAA;UAAA;UAG5CjB,OAAAA,CAAAA,gBAEKgC,IAAI,EAAA;YAAAC,cAAAA,IAAAC,EAAA,EAAA;cAAA,IAAAC,KACEjB,GAAAA,SAAAA;cAAS,OAAAiB,uBAAAA,KAAAD,CAAAA,EAAA,IAAThB,SAASgB,GAAAA,EAAAA;YAAA,CAAA;YACdE,KAAO,EAAA,GAAA;YACPb,MAAQ,EAAA,GAAA;YACRc,CAAG,EAAA,GAAA;YACHC,CAAG,EAAA,EAAA;YACHC,MAAQ,EAAA,GAAA;YAAG,IAAApC,QAAAA,CAAA,EAAA;cAAAH,OAAAA,CAAAA,gBAEVwC,IAAI,EAAA;gBAACH,CAAG,EAAA,EAAA;gBAAIf,QAAU,EAAA,EAAA;gBAAImB,KAAO,EAAA,UAAA;gBAAUtC,QAAA,EAAA;cAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAG3CgC,IAAI,EAAA;gBAACM,CAAG,EAAA,EAAA;gBAAII,GAAG,EAAA,wBAAA;gBAA0BN,KAAO,EAAA,GAAA;gBAAKb,MAAQ,EAAA;cAAA,CAAEvB,CAAAA,EAAAA,eAAAA,CAE/DgC,IAAI,EAAA;gBAACK,CAAG,EAAA,CAAA;gBAAGC,CAAG,EAAA,GAAA;gBAAKI,GAAG,EAAA,mBAAA;gBAAqBN,KAAO,EAAA,EAAA;gBAAIb,MAAQ,EAAA;cAAA,CAAEvB,CAAAA,EAAAA,eAAAA,CAChEwC,IAAI,EAAA;gBACHH,CAAG,EAAA,EAAA;gBACHC,CAAG,EAAA,GAAA;gBACHK,OAAO,EAAA,OAAA;gBACPP,KAAO,EAAA,GAAA;gBACPd,QAAU,EAAA,EAAA;gBACVmB,KAAO,EAAA,UAAA;gBAAUtC,QAAA,EAAA;cAAA,CAAA,CAAA,CAAA;YAAA;UAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAMpB4C,MAAM,EAAA;YAAA,IAACC,SAASA,CAAA,EAAA;cAAA,IAAAC,UAAA;cAAEhC,QAAAA,UAAAA,GAAAA,SAAAA,iDAAAA,UAAAA,CAAanC,KAAM,CAAA,CAAA;YAAC,CAAA;YAAE2D,CAAG,EAAA,GAAA;YAAKS,UAAYtB,EAAAA,SAAAA;YAAS,IAAAtB,QAAAA,CAAA,EAAA;cAAAH,OAAAA,CAAAA,gBACnEgC,IAAI,EAAA;gBAACK,CAAG,EAAA,GAAA;gBAAKd,MAAQ,EAAA,GAAA;gBAAKyB,YAAc,EAAA,CAAA;gBAAGC,SAAW,EAAA,EAAA;gBAAE,IAAA9C,QAAAA,CAAA,EAAA;kBAAAH,OAAAA,CAAAA,gBACtDwC,IAAI,EAAA;oBAACU,SAAS,EAAA,IAAA;oBAAC5D,KAAO8B,EAAAA,cAAAA;oBAAcjB,QAAA,EAAA;kBAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAGpCmD,GAAG,EAAA;oBAACC,GAAK,EAAA,EAAA;oBAAId,CAAG,EAAA,EAAA;oBAAIe,OAAO,EAAA,OAAA;oBAAA,IAAAlD,QAAAA,CAAA,EAAA;sBAAA,OAAAH,gBACzBsD,GAAG,EAAA;wBAAA,IAACzE,IAAIA,CAAA,EAAA;0BAAA,IAAA0E,WAAA;0BAAEzC,QAAAA,WAAAA,GAAAA,SAAAA,kDAAAA,WAAAA,CAAanC,KAAM,CAAA,CAAA;wBAAC,CAAA;wBAAAwB,UAC9BA,SAD8BA,SAC7BqD,IAAAA,EAAMC,KAAKzD;0BAAAA,OAAAA,eAAAA,CACV0D,QAAMrD,UAAA,CAAA;4BAAA,IAACgC,CAACA,CAAA,EAAA;8BAAA,OAAEoB,MAAU,CAAA,GAAA,GAAA;4BAAA;0BAAG,CAAA,EAAMD,IAAI,CAAA,CAAA;wBAAA;sBAAA,CACnC,CAAA;oBAAA;kBAAA,CAAA,CAAA,CAAA;gBAAA;cAAA,CAAAxD,CAAAA,EAAAA,eAAAA,CAKJgC,IAAI,EAAA;gBAACK,CAAG,EAAA,GAAA;gBAAKd,MAAQ,EAAA,GAAA;gBAAKyB,YAAc,EAAA,CAAA;gBAAGC,SAAW,EAAA,EAAA;gBAAE,IAAA9C,QAAAA,CAAA,EAAA;kBAAAH,OAAAA,CAAAA,gBACtDwC,IAAI,EAAA;oBAACU,SAAS,EAAA,IAAA;oBAAC5D,KAAO8B,EAAAA,cAAAA;oBAAcjB,QAAA,EAAA;kBAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAGpCmD,GAAG,EAAA;oBAACC,GAAK,EAAA,EAAA;oBAAId,CAAG,EAAA,EAAA;oBAAIe,OAAO,EAAA,OAAA;oBAAA,IAAAlD,QAAAA,CAAA,EAAA;sBAAA,IAAAwD,WAAA;sBACzB7C,QAAAA,WAAAA,GAAAA,SAAAA,CAAAA,CAAanC,cAAAA,WAAAA,gBAAAA,WAAAA,GAAbmC,WAAAA,CAAanC,KAAAA,CAAAA,CAASiF,cAAAA,WAAAA,uBAAtB9C,WAAAA,CAAsB8C,GAAAA,CAAI,UAACJ,IAAMC,EAAAA,KAAAA;wBAAAA,OAAKzD,eACpC0D,CAAAA,MAAAA,EAAMrD,UAAA,CAAA;0BAACgC,GAAGoB,KAAQ,GAAA;wBAAA,CAAG,EAAMD,IAAI,EACjC;sBAAA,EAAA;oBAAA;kBAAC,CAAA,CAAA,CAAA;gBAAA;cAAA,CAAAxD,CAAAA,EAAAA,eAAAA,CAKLgC,IAAI,EAAA;gBAACK,CAAG,EAAA,GAAA;gBAAKd,MAAQ,EAAA,GAAA;gBAAKyB,YAAc,EAAA,CAAA;gBAAGC,SAAW,EAAA,EAAA;gBAAE,IAAA9C,QAAAA,CAAA,EAAA;kBAAAH,OAAAA,CAAAA,gBACtDwC,IAAI,EAAA;oBAACU,SAAS,EAAA,IAAA;oBAAC5D,KAAO8B,EAAAA,cAAAA;oBAAcjB,QAAA,EAAA;kBAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAGpCmD,GAAG,EAAA;oBAACC,GAAK,EAAA,EAAA;oBAAId,CAAG,EAAA,EAAA;oBAAIe,OAAO,EAAA,OAAA;oBAAA,IAAAlD,QAAAA,CAAA,EAAA;sBAAA,OAAAH,gBACzBO,KAAK,EAAA;wBAAA,IAAC1B,IAAIA,CAAA,EAAA;0BAAA,IAAAgF,WAAA;0BAAE/C,QAAAA,WAAAA,GAAAA,SAAAA,kDAAAA,WAAAA,CAAanC,KAAM,CAAA,CAAA;wBAAC,CAAA;wBAAAwB,UAChCA,SADgCA,SAC/BqD,IAAAA,EAAMC,KAAKzD;0BAAAA,OAAAA,eAAAA,CACV0D,QAAMrD,UAAA,CAAA;4BAACgC,GAAGoB,KAAQ,GAAA;0BAAG,CAAA,EAAMD,IAAI,CAAA,CAAA;wBAAA;sBAAA,CACjC,CAAA;oBAAA;kBAAA,CAAA,CAAA,CAAA;gBAAA;cAAA,CAAAxD,CAAAA,EAAAA,eAAAA,CAKJgC,IAAI,EAAA;gBAACK,CAAG,EAAA,GAAA;gBAAKd,MAAQ,EAAA,GAAA;gBAAKyB,YAAc,EAAA,CAAA;gBAAGC,SAAW,EAAA,EAAA;gBAAE,IAAA9C,QAAAA,CAAA,EAAA;kBAAAH,OAAAA,CAAAA,gBACtDwC,IAAI,EAAA;oBAACU,SAAS,EAAA,IAAA;oBAAC5D,KAAO8B,EAAAA,cAAAA;oBAAcjB,QAAA,EAAA;kBAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAGpCpC,MAAM,EAAA;oBACL0C,SAAW6C,EAAAA,GAAAA;oBACX/D,SAAS,EAAA,KAAA;oBACTiE,OAAO,EAAA,OAAA;oBACPD,GAAK,EAAA,EAAA;oBACLrE,OAAS,EAAA,CAAA;oBAAC,IACVF,IAAIA,CAAA,EAAA;sBAAA,IAAAiF,WAAA;sBAAEhD,QAAAA,WAAAA,GAAAA,SAAAA,kDAAAA,WAAAA,CAAanC,KAAM,CAAA,CAAA;oBAAC,CAAA;oBAC1B2D,CAAG,EAAA,EAAA;oBAAEnC,UAEJA,SAFIA,SAEHqD,IAAAA,EAAMC,KAAKzD;sBAAAA,OAAAA,eAAAA,CACV0D,QAAMrD,UAAA,CAAA;wBAACgC,GAAGoB,KAAQ,GAAA;sBAAG,CAAA,EAAMD,IAAI,CAAA,CAAA;oBAAA;kBAAA,CACjC,CAAA,CAAA;gBAAA;cAAA,CAAAxD,CAAAA,EAAAA,eAAAA,CAIJgC,IAAI,EAAA;gBAACK,CAAG,EAAA,GAAA;gBAAKd,MAAQ,EAAA,GAAA;gBAAKyB,YAAc,EAAA,CAAA;gBAAGC,SAAW,EAAA,EAAA;gBAAE,IAAA9C,QAAAA,CAAA,EAAA;kBAAAH,OAAAA,CAAAA,gBACtDwC,IAAI,EAAA;oBAACU,SAAS,EAAA,IAAA;oBAAC5D,KAAO8B,EAAAA,cAAAA;oBAAcjB,QAAA,EAAA;kBAAA,CAAAH,CAAAA,EAAAA,eAAAA,CAGpCmD,GAAG,EAAA;oBAACC,GAAK,EAAA,EAAA;oBAAId,CAAG,EAAA,EAAA;oBAAIe,OAAO,EAAA,OAAA;oBAAA,IAAAlD,QAAAA,CAAA,EAAA;sBAAA,OAAAH,gBACzB+D,IAAI,EAAA;wBAAA,IAAClF,IAAIA,CAAA,EAAA;0BAAA,IAAAmF,WAAA;0BAAElD,QAAAA,WAAAA,GAAAA,SAAAA,kDAAAA,WAAAA,CAAanC,KAAM,CAAA,CAAA;wBAAC,CAAA;wBAAAwB,UAC/BA,SAD+BA,SAC9BqD,IAAAA,EAAMC,KAAKzD;0BAAAA,OAAAA,eAAAA,CACV0D,QAAMrD,UAAA,CAAA;4BAAA,IAACgC,CAACA,CAAA,EAAA;8BAAA,OAAEoB,MAAU,CAAA,GAAA,GAAA;4BAAA;6BAASD,IAAI,EAAA;4BAAIS,UAAY,EAAA;8BAAE5B,CAAG,EAAA;gCAAE6B,QAAU,EAAA;8BAAA;4BAAK;0BAAE,CAAC,CAAA,CAAA;wBAAA;sBAAA,CAC5E,CAAA;oBAAA;kBAAA,CAAA,CAAA,CAAA;gBAAA;cAAA,CAAA,CAAA,CAAA;YAAA;UAAA,CAAA,CAAA,CAAA;QAOb,CAAA,CAAA;;;;","x_google_ignoreList":[0]}