{"version":3,"file":"Buttons-legacy-BcXIvE8h.js","sources":["../../node_modules/.pnpm/@lightningtv+solid-ui@0.25.1_@lightningtv+core@2.0.1_@lightningtv+solid@2.0.1_solid-js@1.8.20__solid-js@1.8.20/node_modules/@lightningtv/solid-ui/components/Badge/Badge.tsx","../../src/pages/Buttons.tsx"],"sourcesContent":["/*\n * Copyright 2023 Comcast Cable Communications Management, LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createMemo, type Component } from 'solid-js';\nimport { View, Text, type BorderStyleObject } from '@lightningtv/solid';\nimport styles from './Badge.styles.js';\nimport type { BadgeProps } from './Badge.types.js';\n\nconst BadgeContainer: Component<BadgeProps> = props => {\n  return (\n    <View\n      {...props}\n      // borderColor={props.strokeColor} // TODO clew uses strokeColor, but we currently don't account for nested properties (border.color)\n      // borderWidth={props.strokeWidth} // TODO clew uses strokeWidth, but we currently don't account for nested properties (border.width)\n      color={props.backgroundColor}\n      borderRadius={props.radius}\n      // @ts-expect-error TODO type needs to be fixed in framework\n      style={[\n        props.style, //\n        styles.Container.tones[props.tone ?? styles.tone],\n        styles.Container.base\n      ]}\n      forwardStates\n    />\n  );\n};\n\nconst Badge: Component<BadgeProps> = (props: BadgeProps) => {\n  const tone = createMemo(() => props.tone ?? styles.tone);\n  const baseBorderStyle = styles.Container.base.border as BorderStyleObject;\n\n  return (\n    <BadgeContainer\n      {...props}\n      height={props.height || styles.Text.base.lineHeight}\n      tone={tone()}\n      style={props.style}\n    >\n      <Text\n        color={props.textColor}\n        lineHeight={(props.height || styles.Text.base.lineHeight) + baseBorderStyle.width}\n        style={[\n          styles.Text.tones[tone()], //\n          styles.Text.base\n        ]}\n      >\n        {props.title}\n      </Text>\n    </BadgeContainer>\n  );\n};\n\nexport { Badge as default, BadgeContainer };\n","import {\n  View,\n  Text,\n  ElementNode,\n  IntrinsicNodeStyleProps,\n} from \"@lightningtv/solid\";\nimport { Button, Badge } from \"@lightningtv/solid-ui\";\nimport { Row } from \"@lightningtv/solid-ui\";\n\nconst ButtonsPage = () => {\n  function onEnter(this: ElementNode, event, elm) {\n    this.states.toggle(\"disabled\");\n  }\n\n  const RowStyles = {\n    display: \"flex\",\n    justifyContent: \"flexStart\",\n    width: 1500,\n    height: 300,\n    color: \"#00000000\",\n    gap: 26,\n    y: 400,\n  } satisfies IntrinsicNodeStyleProps;\n\n  return (\n    <>\n      <Row x={100} y={200} gap={5} style={RowStyles}>\n        <Badge>HD</Badge>\n        <Badge>PG13</Badge>\n        <Badge>NC17</Badge>\n        <Text fontSize={30}>I like bananas</Text>\n        <Badge>DOLBY</Badge>\n      </Row>\n\n      <Row x={100} gap={40} style={RowStyles}>\n        <Button autofocus onEnter={onEnter}>\n          TV Shows\n        </Button>\n        <Button states={{ active: true, disabled: false }}>Movies</Button>\n        <Button states={\"active\"}>Sports</Button>\n        <Button states=\"disabled\">News</Button>\n      </Row>\n    </>\n  );\n};\n\nexport default ButtonsPage;\n"],"names":["BadgeContainer","props","_$createComponent","View","_$mergeProps","color","backgroundColor","borderRadius","radius","style","_props$tone","styles","Container","tones","tone","base","forwardStates","Badge","createMemo","_props$tone2","baseBorderStyle","border","height","Text","lineHeight","children","textColor","width","title","ButtonsPage","onEnter","event","elm","states","toggle","RowStyles","display","justifyContent","gap","y","Row","x","fontSize","Button","autofocus","active","disabled"],"mappings":"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","x_google_ignoreList":[0]}