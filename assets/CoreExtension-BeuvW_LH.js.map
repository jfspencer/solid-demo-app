{"version":3,"file":"CoreExtension-BeuvW_LH.js","sources":["../../../../../renderer/dist/src/utils.js","../../../../../renderer/dist/src/common/EventEmitter.js","../../../../../renderer/dist/src/core/renderers/CoreShader.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/ShaderUtils.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/WebGlUtils.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreShader.js","../../../../../renderer/dist/src/core/textures/Texture.js","../../../../../renderer/dist/src/core/lib/utils.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/TrFontFace.js","../../../../../renderer/dist/src/core/renderers/CoreContextTexture.js","../../../../../renderer/dist/src/core/renderers/CoreRenderer.js","../../../../../renderer/dist/src/core/renderers/CoreRenderOp.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreRenderOp.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/RendererUtils.js","../../../../../renderer/node_modules/.pnpm/memize@2.1.0/node_modules/memize/dist/index.js","../../../../../renderer/dist/src/core/utils.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxTexture.js","../../../../../renderer/dist/src/core/textures/ColorTexture.js","../../../../../renderer/dist/src/core/textures/SubTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxSubTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/BufferCollection.js","../../../../../renderer/dist/src/core/lib/WebGlContextWrapper.js","../../../../../renderer/dist/src/core/textures/RenderTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxRenderTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreRenderer.js","../../../../../renderer/dist/src/core/text-rendering/renderers/SdfTextRenderer/internal/SpecialCodepoints.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/FontShaper.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/SdfFontShaper.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/SdfTrFontFace.js","../../../../../renderer/dist/src/core/CoreExtension.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function createWebGLContext(canvas, contextSpy) {\n    const config = {\n        alpha: true,\n        antialias: false,\n        depth: false,\n        stencil: true,\n        desynchronized: false,\n        // Disabled because it prevents Visual Regression Tests from working\n        // failIfMajorPerformanceCaveat: true,\n        powerPreference: 'high-performance',\n        premultipliedAlpha: true,\n        preserveDrawingBuffer: false,\n    };\n    const gl = \n    // TODO: Remove this assertion once this issue is fixed in TypeScript\n    // https://github.com/microsoft/TypeScript/issues/53614\n    (canvas.getContext('webgl', config) ||\n        canvas.getContext('experimental-webgl', config));\n    if (!gl) {\n        throw new Error('Unable to create WebGL context');\n    }\n    if (contextSpy) {\n        // Proxy the GL context to log all GL calls\n        return new Proxy(gl, {\n            get(target, prop) {\n                const value = target[prop];\n                if (typeof value === 'function') {\n                    contextSpy.increment(String(prop));\n                    return value.bind(target);\n                }\n                return value;\n            },\n        });\n    }\n    return gl;\n}\n/**\n * Asserts a condition is truthy, otherwise throws an error\n *\n * @remarks\n * Useful at the top of functions to ensure certain conditions, arguments and\n * properties are set/met before continuing. When using this function,\n * TypeScript will narrow away falsy types from the condition.\n *\n * @param condition\n * @param message\n * @returns\n */\nexport function assertTruthy(condition, message) {\n    if (isProductionEnvironment())\n        return;\n    if (!condition) {\n        throw new Error(message || 'Assertion failed');\n    }\n}\n/**\n * Merges two colors based on a given progress value.\n *\n * This function takes two colors (c1 and c2) represented as 32-bit integers\n * in RGBA format and blends them based on the provided progress value (p).\n * The result is a new color that is a weighted combination of the input colors,\n * where the weight is determined by the progress value.\n *\n * @param {number} c1 - The first color in RGBA format (32-bit integer).\n * @param {number} c2 - The second color in RGBA format (32-bit integer).\n * @param {number} p - The progress value between 0 and 1.\n * @returns {number} The merged color as a 32-bit integer in RGBA format.\n */\nexport function mergeColorProgress(rgba1, rgba2, p) {\n    const r1 = Math.trunc(rgba1 >>> 24);\n    const g1 = Math.trunc((rgba1 >>> 16) & 0xff);\n    const b1 = Math.trunc((rgba1 >>> 8) & 0xff);\n    const a1 = Math.trunc(rgba1 & 0xff);\n    const r2 = Math.trunc(rgba2 >>> 24);\n    const g2 = Math.trunc((rgba2 >>> 16) & 0xff);\n    const b2 = Math.trunc((rgba2 >>> 8) & 0xff);\n    const a2 = Math.trunc(rgba2 & 0xff);\n    const r = Math.round(r2 * p + r1 * (1 - p));\n    const g = Math.round(g2 * p + g1 * (1 - p));\n    const b = Math.round(b2 * p + b1 * (1 - p));\n    const a = Math.round(a2 * p + a1 * (1 - p));\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * @internalRemarks\n * This method does NOT premultiply the alpha into the color channels. If that\n * is required (for internal use only) use {@link mergeColorAlphaPremultiplied}\n * instead.\n *\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @returns\n */\nexport function mergeColorAlpha(rgba, alpha) {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = Math.trunc((rgba & 0xff) * alpha);\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter. Before returning, the\n * final alpha value is multiplied into the color channels.\n *\n * @remarks\n * If `flipEndianess` is set to true, the function will returned an ABGR encoded number\n * which is useful when the color value needs to be passed into a shader attribute.\n *\n * NOTE: This method returns a PREMULTIPLIED alpha color which is generally only useful\n * in the context of the internal rendering process. Use {@link mergeColorAlpha} if you\n * need to blend an alpha value into a color in the context of the Renderer's\n * main API.\n *\n * @internalRemarks\n * Do not expose this method in the main API because Renderer users should instead use\n * {@link mergeColorAlpha} to manipulate the alpha value of a color.\n *\n * @internal\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @param flipEndianess Flip the endianess. RGBA becomes encoded as ABGR (for inserting colors into shader attributes)\n * @returns\n */\nexport function mergeColorAlphaPremultiplied(rgba, alpha, flipEndianess = false) {\n    const newAlpha = ((rgba & 0xff) / 255) * alpha;\n    const r = Math.trunc((rgba >>> 24) * newAlpha);\n    const g = Math.trunc(((rgba >>> 16) & 0xff) * newAlpha);\n    const b = Math.trunc(((rgba >>> 8) & 0xff) * newAlpha);\n    const a = Math.trunc(newAlpha * 255);\n    if (flipEndianess) {\n        return ((a << 24) | (b << 16) | (g << 8) | r) >>> 0;\n    }\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Returns true if the given object has the given \"own\" property.\n *\n * @param obj\n * @param prop\n * @returns\n */\nexport function hasOwn(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n/**\n * Converts degrees to radians\n *\n * @param degrees\n * @returns\n */\nexport function deg2Rad(degrees) {\n    return (degrees * Math.PI) / 180;\n}\n/**\n * Returns image aspect ratio\n *\n * @param width\n * @param height\n * @returns\n */\nexport function getImageAspectRatio(width, height) {\n    return width / height;\n}\n/**\n * Checks import.meta if env is production\n *\n * @returns\n */\nexport function isProductionEnvironment() {\n    return import.meta.env && import.meta.env.PROD;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * EventEmitter base class\n */\nexport class EventEmitter {\n    eventListeners = {};\n    on(event, listener) {\n        let listeners = this.eventListeners[event];\n        if (!listeners) {\n            listeners = [];\n        }\n        listeners.push(listener);\n        this.eventListeners[event] = listeners;\n    }\n    off(event, listener) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        if (!listener) {\n            delete this.eventListeners[event];\n            return;\n        }\n        const index = listeners.indexOf(listener);\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n    once(event, listener) {\n        const onceListener = (target, data) => {\n            this.off(event, onceListener);\n            listener(target, data);\n        };\n        this.on(event, onceListener);\n    }\n    emit(event, data) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        [...listeners].forEach((listener) => {\n            listener(this, data);\n        });\n    }\n    removeAllListeners() {\n        this.eventListeners = {};\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreShader {\n    // abstract draw(): void;\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {};\n    }\n}\n//# sourceMappingURL=CoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//#endregion Types\nexport function createShader(glw, type, source) {\n    const shader = glw.createShader(type);\n    if (!shader) {\n        throw new Error();\n    }\n    glw.shaderSource(shader, source);\n    glw.compileShader(shader);\n    const success = glw.getShaderParameter(shader, glw.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(glw.getShaderInfoLog(shader));\n    glw.deleteShader(shader);\n}\nexport function createProgram(glw, vertexShader, fragmentShader) {\n    const program = glw.createProgram();\n    if (!program) {\n        throw new Error();\n    }\n    glw.attachShader(program, vertexShader);\n    glw.attachShader(program, fragmentShader);\n    glw.linkProgram(program);\n    const success = glw.getProgramParameter(program, glw.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(glw.getProgramInfoLog(program));\n    glw.deleteProgram(program);\n    return undefined;\n}\n//# sourceMappingURL=ShaderUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generic WebGL Utility Functions\n *\n * @remarks\n * Nothing here should be coupled to Renderer logic / types.\n *\n * @param gl\n * @returns\n */\nexport function isWebGl2(gl) {\n    return (self.WebGL2RenderingContext && gl instanceof self.WebGL2RenderingContext);\n}\n//# sourceMappingURL=WebGlUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, hasOwn } from '../../../utils.js';\nimport { CoreShader } from '../CoreShader.js';\nimport { createProgram, createShader, } from './internal/ShaderUtils.js';\nimport { isWebGl2 } from './internal/WebGlUtils.js';\nexport class WebGlCoreShader extends CoreShader {\n    boundBufferCollection = null;\n    buffersBound = false;\n    program;\n    /**\n     * Vertex Array Object\n     *\n     * @remarks\n     * Used by WebGL2 Only\n     */\n    vao;\n    renderer;\n    glw;\n    attributeBuffers;\n    attributeLocations;\n    attributeNames;\n    uniformLocations;\n    uniformTypes;\n    supportsIndexedTextures;\n    constructor(options) {\n        super();\n        const renderer = (this.renderer = options.renderer);\n        const glw = (this.glw = this.renderer.glw);\n        this.supportsIndexedTextures = options.supportsIndexedTextures || false;\n        // Check that extensions are supported\n        const webGl2 = glw.isWebGl2();\n        const requiredExtensions = (webGl2 && options.webgl2Extensions) ||\n            (!webGl2 && options.webgl1Extensions) ||\n            [];\n        const glVersion = webGl2 ? '2.0' : '1.0';\n        requiredExtensions.forEach((extensionName) => {\n            if (!glw.getExtension(extensionName)) {\n                throw new Error(`Shader \"${this.constructor.name}\" requires extension \"${extensionName}\" for WebGL ${glVersion} but wasn't found`);\n            }\n        });\n        // Gather shader sources\n        // - If WebGL 2 and special WebGL 2 sources are provided, we copy those sources and delete\n        // the extra copy of them to save memory.\n        // TODO: This could be further made optimal by just caching the compiled shaders and completely deleting\n        // the source code\n        const shaderSources = options.shaderSources ||\n            this.constructor.shaderSources;\n        if (!shaderSources) {\n            throw new Error(`Shader \"${this.constructor.name}\" is missing shaderSources.`);\n        }\n        else if (webGl2 && shaderSources?.webGl2) {\n            shaderSources.fragment = shaderSources.webGl2.fragment;\n            shaderSources.vertex = shaderSources.webGl2.vertex;\n            delete shaderSources.webGl2;\n        }\n        const textureUnits = renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        const vertexSource = shaderSources.vertex instanceof Function\n            ? shaderSources.vertex(textureUnits)\n            : shaderSources.vertex;\n        const fragmentSource = shaderSources.fragment instanceof Function\n            ? shaderSources.fragment(textureUnits)\n            : shaderSources.fragment;\n        const vertexShader = createShader(glw, glw.VERTEX_SHADER, vertexSource);\n        const fragmentShader = createShader(glw, glw.FRAGMENT_SHADER, fragmentSource);\n        if (!vertexShader || !fragmentShader) {\n            throw new Error();\n        }\n        const program = createProgram(glw, vertexShader, fragmentShader);\n        if (!program) {\n            throw new Error();\n        }\n        this.program = program;\n        if (webGl2) {\n            const vao = glw.createVertexArray();\n            if (!vao) {\n                throw new Error();\n            }\n            this.vao = vao;\n            glw.bindVertexArray(this.vao);\n        }\n        this.attributeLocations = {};\n        this.attributeBuffers = {};\n        this.attributeNames = [];\n        [...options.attributes].forEach((attributeName) => {\n            const location = glw.getAttribLocation(this.program, attributeName);\n            if (location < 0) {\n                throw new Error(`${this.constructor.name}: Vertex shader must have an attribute \"${attributeName}\"!`);\n            }\n            const buffer = glw.createBuffer();\n            if (!buffer) {\n                throw new Error(`${this.constructor.name}: Could not create buffer for attribute \"${attributeName}\"`);\n            }\n            this.attributeLocations[attributeName] = location;\n            this.attributeBuffers[attributeName] = buffer;\n            this.attributeNames.push(attributeName);\n        });\n        this.uniformLocations = {};\n        this.uniformTypes = {};\n        options.uniforms.forEach((uniform) => {\n            const location = glw.getUniformLocation(this.program, uniform.name);\n            this.uniformTypes[uniform.name] = uniform.uniform;\n            if (!location) {\n                console.warn(`Shader \"${this.constructor.name}\" could not get uniform location for \"${uniform.name}\"`);\n                return;\n            }\n            this.uniformLocations[uniform.name] = location;\n        });\n    }\n    bindBufferAttribute(location, buffer, attribute) {\n        const { glw } = this;\n        glw.enableVertexAttribArray(location);\n        glw.vertexAttribPointer(buffer, location, attribute.size, attribute.type, attribute.normalized, attribute.stride, attribute.offset);\n    }\n    disableAttribute(location) {\n        this.glw.disableVertexAttribArray(location);\n    }\n    disableAttributes() {\n        for (const loc in this.attributeLocations) {\n            this.disableAttribute(this.attributeLocations[loc]);\n        }\n        this.boundBufferCollection = null;\n    }\n    /**\n     * Given two sets of Shader props destined for this Shader, determine if they can be batched together\n     * to reduce the number of draw calls.\n     *\n     * @remarks\n     * This is used by the {@link WebGlCoreRenderer} to determine if it can batch multiple consecutive draw\n     * calls into a single draw call.\n     *\n     * By default, this returns false (meaning no batching is allowed), but can be\n     * overridden by child classes to provide more efficient batching.\n     *\n     * @param propsA\n     * @param propsB\n     * @returns\n     */\n    canBatchShaderProps(propsA, propsB) {\n        return false;\n    }\n    bindRenderOp(renderOp, props) {\n        this.bindBufferCollection(renderOp.buffers);\n        if (renderOp.textures.length > 0) {\n            this.bindTextures(renderOp.textures);\n        }\n        const { glw, parentHasRenderTexture, renderToTexture } = renderOp;\n        // Skip if the parent and current operation both have render textures\n        if (renderToTexture && parentHasRenderTexture) {\n            return;\n        }\n        // Bind render texture framebuffer dimensions as resolution\n        // if the parent has a render texture\n        if (parentHasRenderTexture) {\n            const { width, height } = renderOp.framebufferDimensions || {};\n            // Force pixel ratio to 1.0 for render textures since they are always 1:1\n            // the final render texture will be rendered to the screen with the correct pixel ratio\n            this.setUniform('u_pixelRatio', 1.0);\n            // Set resolution to the framebuffer dimensions\n            this.setUniform('u_resolution', new Float32Array([width ?? 0, height ?? 0]));\n        }\n        else {\n            this.setUniform('u_pixelRatio', renderOp.options.pixelRatio);\n            this.setUniform('u_resolution', new Float32Array([glw.canvas.width, glw.canvas.height]));\n        }\n        if (props) {\n            // Bind optional automatic uniforms\n            // These are only bound if their keys are present in the props.\n            if (hasOwn(props, '$dimensions')) {\n                let dimensions = props.$dimensions;\n                if (!dimensions) {\n                    dimensions = renderOp.dimensions;\n                }\n                this.setUniform('u_dimensions', [dimensions.width, dimensions.height]);\n            }\n            if (hasOwn(props, '$alpha')) {\n                let alpha = props.$alpha;\n                if (!alpha) {\n                    alpha = renderOp.alpha;\n                }\n                this.setUniform('u_alpha', alpha);\n            }\n            this.bindProps(props);\n        }\n    }\n    setUniform(name, ...value) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-argument\n        this.glw.setUniform(this.uniformTypes[name], this.uniformLocations[name], ...value);\n    }\n    bindBufferCollection(buffer) {\n        if (this.boundBufferCollection === buffer) {\n            return;\n        }\n        for (const attributeName in this.attributeLocations) {\n            const resolvedBuffer = buffer.getBuffer(attributeName);\n            const resolvedInfo = buffer.getAttributeInfo(attributeName);\n            assertTruthy(resolvedBuffer, `Buffer for \"${attributeName}\" not found`);\n            assertTruthy(resolvedInfo);\n            this.bindBufferAttribute(this.attributeLocations[attributeName], resolvedBuffer, resolvedInfo);\n        }\n        this.boundBufferCollection = buffer;\n    }\n    bindProps(props) {\n        // Implement in child class\n    }\n    bindTextures(textures) {\n        // no defaults\n    }\n    attach() {\n        this.glw.useProgram(this.program);\n        this.glw.useProgram(this.program);\n        if (this.glw.isWebGl2() && this.vao) {\n            this.glw.bindVertexArray(this.vao);\n        }\n    }\n    detach() {\n        this.disableAttributes();\n    }\n    static shaderSources;\n}\n//# sourceMappingURL=WebGlCoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../common/EventEmitter.js';\n/**\n * Represents a source of texture data for a CoreContextTexture.\n *\n * @remarks\n * Texture sources are used to populate a CoreContextTexture when that texture\n * is loaded. Texture data retrieved by the CoreContextTexture by the\n * `getTextureData` method. It's the responsibility of the concerete `Texture`\n * subclass to implement this method appropriately.\n */\nexport class Texture extends EventEmitter {\n    txManager;\n    /**\n     * The dimensions of the texture\n     *\n     * @remarks\n     * Until the texture data is loaded for the first time the value will be\n     * `null`.\n     */\n    dimensions = null;\n    error = null;\n    state = 'freed';\n    renderableOwners = new Set();\n    constructor(txManager) {\n        super();\n        this.txManager = txManager;\n    }\n    /**\n     * Add/remove an owner to/from the Texture based on its renderability.\n     *\n     * @remarks\n     * Any object can own a texture, be it a CoreNode or even the state object\n     * from a Text Renderer.\n     *\n     * When the reference to the texture that an owner object holds is replaced\n     * or cleared it must call this with `renderable=false` to release the owner\n     * association.\n     *\n     * @param owner\n     * @param renderable\n     */\n    setRenderableOwner(owner, renderable) {\n        if (renderable) {\n            this.renderableOwners.add(owner);\n        }\n        else {\n            this.renderableOwners.delete(owner);\n        }\n    }\n    /**\n     * Returns true if the texture is assigned to any Nodes that are renderable.\n     */\n    get renderable() {\n        return this.renderableOwners.size > 0;\n    }\n    /**\n     * Set the state of the texture\n     *\n     * @remark\n     * Intended for internal-use only but declared public so that it can be set\n     * by it's associated {@link CoreContextTexture}\n     *\n     * @param state\n     * @param args\n     */\n    setState(state, ...args) {\n        if (this.state !== state) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.state = state;\n            if (state === 'loaded') {\n                const loadedArgs = args;\n                this.dimensions = loadedArgs[0];\n            }\n            else if (state === 'failed') {\n                const failedArgs = args;\n                this.error = failedArgs[0];\n            }\n            this.emit(state, ...args);\n        }\n    }\n    /**\n     * Make a cache key for this texture.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide an\n     * appropriate cache key for the texture type including the texture's\n     * properties that uniquely identify a copy of the texture. If the texture\n     * type does not support caching, then this method should return `false`.\n     *\n     * @param props\n     * @returns\n     * A cache key for this texture or `false` if the texture type does not\n     * support caching.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    /**\n     * Resolve the default values for the texture's properties.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide\n     * default values for the texture's optional properties.\n     *\n     * @param props\n     * @returns\n     * The default values for the texture's properties.\n     */\n    static resolveDefaults(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    props) {\n        return {};\n    }\n}\n//# sourceMappingURL=Texture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const getNormalizedRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r / 255, g / 255, b / 255, a / 255];\n};\nexport const getRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r, g, b, a];\n};\nexport const norm = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    const rgbaArr = [r / 255, g / 255, b / 255, a / 255];\n    rgbaArr[0] = Math.max(0, Math.min(255, rgbaArr[0]));\n    rgbaArr[1] = Math.max(0, Math.min(255, rgbaArr[1]));\n    rgbaArr[2] = Math.max(0, Math.min(255, rgbaArr[2]));\n    rgbaArr[3] = Math.max(0, Math.min(255, rgbaArr[3]));\n    let v = ((rgbaArr[3] | 0) << 24) +\n        ((rgbaArr[0] | 0) << 16) +\n        ((rgbaArr[1] | 0) << 8) +\n        (rgbaArr[2] | 0);\n    if (v < 0) {\n        v = 0xffffffff + v + 1;\n    }\n    return v;\n};\nexport function getNormalizedAlphaComponent(rgba) {\n    return (rgba & 0xff) / 255.0;\n}\n/**\n * Get a CSS color string from a RGBA color\n *\n * @param color\n * @returns\n */\nexport function getRgbaString(color) {\n    const r = Math.floor(color[0] * 255.0);\n    const g = Math.floor(color[1] * 255.0);\n    const b = Math.floor(color[2] * 255.0);\n    const a = Math.floor(color[3] * 255.0);\n    return `rgba(${r},${g},${b},${a.toFixed(4)})`;\n}\nexport function createBound(x1, y1, x2, y2, out) {\n    if (out) {\n        out.x1 = x1;\n        out.y1 = y1;\n        out.x2 = x2;\n        out.y2 = y2;\n        return out;\n    }\n    return {\n        x1,\n        y1,\n        x2,\n        y2,\n    };\n}\nexport function intersectBound(a, b, out) {\n    const intersection = createBound(Math.max(a.x1, b.x1), Math.max(a.y1, b.y1), Math.min(a.x2, b.x2), Math.min(a.y2, b.y2), out);\n    if (intersection.x1 < intersection.x2 && intersection.y1 < intersection.y2) {\n        return intersection;\n    }\n    return createBound(0, 0, 0, 0, intersection);\n}\nexport function boundsOverlap(a, b) {\n    return a.x1 < b.x2 && a.x2 > b.x1 && a.y1 < b.y2 && a.y2 > b.y1;\n}\nexport function convertBoundToRect(bound, out) {\n    if (out) {\n        out.x = bound.x1;\n        out.y = bound.y1;\n        out.width = bound.x2 - bound.x1;\n        out.height = bound.y2 - bound.y1;\n        return out;\n    }\n    return {\n        x: bound.x1,\n        y: bound.y1,\n        width: bound.x2 - bound.x1,\n        height: bound.y2 - bound.y1,\n    };\n}\nexport function intersectRect(a, b, out) {\n    const x = Math.max(a.x, b.x);\n    const y = Math.max(a.y, b.y);\n    const width = Math.min(a.x + a.width, b.x + b.width) - x;\n    const height = Math.min(a.y + a.height, b.y + b.height) - y;\n    if (width > 0 && height > 0) {\n        if (out) {\n            out.x = x;\n            out.y = y;\n            out.width = width;\n            out.height = height;\n            return out;\n        }\n        return {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n    if (out) {\n        out.x = 0;\n        out.y = 0;\n        out.width = 0;\n        out.height = 0;\n        return out;\n    }\n    return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n}\nexport function copyRect(a, out) {\n    if (out) {\n        out.x = a.x;\n        out.y = a.y;\n        out.width = a.width;\n        out.height = a.height;\n        return out;\n    }\n    return {\n        x: a.x,\n        y: a.y,\n        width: a.width,\n        height: a.height,\n    };\n}\nexport function compareRect(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null) {\n        return false;\n    }\n    return (a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height);\n}\nexport function boundInsideBound(bound1, bound2) {\n    return (bound1.x1 <= bound2.x2 &&\n        bound1.y1 <= bound2.y2 &&\n        bound1.x2 >= bound2.x1 &&\n        bound1.y2 >= bound2.y1);\n}\nexport function isBoundPositive(bound) {\n    return bound.x1 < bound.x2 && bound.y1 < bound.y2;\n}\nexport function isRectPositive(rect) {\n    return rect.width > 0 && rect.height > 0;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../../common/EventEmitter.js';\nexport class TrFontFace extends EventEmitter {\n    fontFamily;\n    descriptors;\n    loaded = false;\n    constructor(fontFamily, descriptors) {\n        super();\n        this.fontFamily = fontFamily;\n        this.descriptors = {\n            style: 'normal',\n            weight: 'normal',\n            stretch: 'normal',\n            ...descriptors,\n        };\n    }\n    /**\n     * Convert a TrFontFaceDescriptors to a FontFaceDescriptors which differ slightly\n     *\n     * @param descriptors\n     * @returns\n     */\n    static convertToCssFontFaceDescriptors(descriptors) {\n        return {\n            style: descriptors.style,\n            weight: typeof descriptors.weight === 'number'\n                ? `${descriptors.weight}`\n                : descriptors.weight,\n            stretch: descriptors.stretch,\n            unicodeRange: descriptors.unicodeRange,\n            variant: descriptors.variant,\n            featureSettings: descriptors.featureSettings,\n            display: descriptors.display,\n        };\n    }\n}\n//# sourceMappingURL=TrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreContextTexture {\n    memManager;\n    textureSource;\n    constructor(memManager, textureSource) {\n        this.memManager = memManager;\n        this.textureSource = textureSource;\n    }\n}\n//# sourceMappingURL=CoreContextTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreContextTexture } from './CoreContextTexture.js';\nexport class CoreRenderer {\n    stage;\n    constructor(stage) {\n        this.stage = stage;\n    }\n}\n//# sourceMappingURL=CoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreRenderOp {\n}\n//# sourceMappingURL=CoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreRenderOp } from '../CoreRenderOp.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nconst MAX_TEXTURES = 8; // TODO: get from gl\n/**\n * Can render multiple quads with multiple textures (up to vertex shader texture limit)\n *\n */\nexport class WebGlCoreRenderOp extends CoreRenderOp {\n    glw;\n    options;\n    buffers;\n    shader;\n    shaderProps;\n    alpha;\n    clippingRect;\n    dimensions;\n    bufferIdx;\n    zIndex;\n    renderToTexture;\n    parentHasRenderTexture;\n    framebufferDimensions;\n    length = 0;\n    numQuads = 0;\n    textures = [];\n    maxTextures;\n    constructor(glw, options, buffers, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, zIndex, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        super();\n        this.glw = glw;\n        this.options = options;\n        this.buffers = buffers;\n        this.shader = shader;\n        this.shaderProps = shaderProps;\n        this.alpha = alpha;\n        this.clippingRect = clippingRect;\n        this.dimensions = dimensions;\n        this.bufferIdx = bufferIdx;\n        this.zIndex = zIndex;\n        this.renderToTexture = renderToTexture;\n        this.parentHasRenderTexture = parentHasRenderTexture;\n        this.framebufferDimensions = framebufferDimensions;\n        this.maxTextures = shader.supportsIndexedTextures\n            ? glw.getParameter(glw.MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n            : 1;\n    }\n    addTexture(texture) {\n        const { textures, maxTextures } = this;\n        const existingIdx = textures.findIndex((t) => t === texture);\n        if (existingIdx !== -1) {\n            return existingIdx;\n        }\n        const newIdx = textures.length;\n        if (newIdx >= maxTextures) {\n            return 0xffffffff;\n        }\n        this.textures.push(texture);\n        return newIdx;\n    }\n    draw() {\n        const { glw, shader, shaderProps, options } = this;\n        const { shManager } = options;\n        shManager.useShader(shader);\n        shader.bindRenderOp(this, shaderProps);\n        // TODO: Reduce calculations required\n        const quadIdx = (this.bufferIdx / 24) * 6 * 2;\n        // Clipping\n        if (this.clippingRect.valid) {\n            const { x, y, width, height } = this.clippingRect;\n            const pixelRatio = options.pixelRatio;\n            const canvasHeight = options.canvas.height;\n            const clipX = Math.round(x * pixelRatio);\n            const clipWidth = Math.round(width * pixelRatio);\n            const clipHeight = Math.round(height * pixelRatio);\n            const clipY = Math.round(canvasHeight - clipHeight - y * pixelRatio);\n            glw.setScissorTest(true);\n            glw.scissor(clipX, clipY, clipWidth, clipHeight);\n        }\n        else {\n            glw.setScissorTest(false);\n        }\n        glw.drawElements(glw.TRIANGLES, 6 * this.numQuads, glw.UNSIGNED_SHORT, quadIdx);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Get device specific webgl parameters\n * @param glw\n */\nexport function getWebGlParameters(glw) {\n    const params = {\n        MAX_RENDERBUFFER_SIZE: 0,\n        MAX_TEXTURE_SIZE: 0,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n        MAX_VIEWPORT_DIMS: 0,\n        MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0,\n        MAX_VERTEX_ATTRIBS: 0,\n        MAX_VARYING_VECTORS: 0,\n        MAX_VERTEX_UNIFORM_VECTORS: 0,\n        MAX_FRAGMENT_UNIFORM_VECTORS: 0,\n    };\n    // Map over all parameters and get them\n    const keys = Object.keys(params);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        params[key] = glw.getParameter(glw[key]);\n    });\n    return params;\n}\n/**\n * Get device webgl extensions\n * @param glw\n */\nexport function getWebGlExtensions(glw) {\n    const extensions = {\n        ANGLE_instanced_arrays: null,\n        WEBGL_compressed_texture_s3tc: null,\n        WEBGL_compressed_texture_astc: null,\n        WEBGL_compressed_texture_etc: null,\n        WEBGL_compressed_texture_etc1: null,\n        WEBGL_compressed_texture_pvrtc: null,\n        WEBKIT_WEBGL_compressed_texture_pvrtc: null,\n        WEBGL_compressed_texture_s3tc_srgb: null,\n        OES_vertex_array_object: null,\n    };\n    // Map over all extensions and get them\n    const keys = Object.keys(extensions);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        extensions[key] = glw.getExtension(key);\n    });\n    return extensions;\n}\n/**\n * Allocate big memory chunk that we\n * can re-use to draw quads\n *\n * @param glw\n * @param size\n */\nexport function createIndexBuffer(glw, size) {\n    const maxQuads = ~~(size / 80);\n    const indices = new Uint16Array(maxQuads * 6);\n    for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n        indices[i] = j;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n        indices[i + 3] = j + 2;\n        indices[i + 4] = j + 1;\n        indices[i + 5] = j + 3;\n    }\n    const buffer = glw.createBuffer();\n    glw.elementArrayBufferData(buffer, indices, glw.STATIC_DRAW);\n}\n/**\n * Checks if an object is of type HTMLImageElement.\n * This is used because we cant check for HTMLImageElement directly when the\n * renderer is running in a seperate web worker context.\n *\n * @param obj\n * @returns\n */\nexport function isHTMLImageElement(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        obj.constructor &&\n        obj.constructor.name === 'HTMLImageElement');\n}\n//# sourceMappingURL=RendererUtils.js.map","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {(...args: any[]) => any} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {((...args: Parameters<F>) => ReturnType<F>) & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize(fn, options) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized(/* ...args */) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs,\n\t\t\ti;\n\n\t\tsearchCache: while (node) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif (node.args.length !== arguments.length) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (node.args[i] !== arguments[i]) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== head) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif (node === tail) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ (head).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply(null, args),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (head) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif (size === /** @type {MemizeOptions} */ (options).maxSize) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ (tail).prev;\n\t\t\t/** @type {MemizeCacheNode} */ (tail).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function () {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nexport { memize as default };\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Core Utility Functions\n *\n * @module\n */\nimport memo from 'memize';\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\nconst degree = Math.PI / 180;\nexport const setMatrixArrayType = (type) => {\n    ARRAY_TYPE = type;\n};\nexport const toRadian = (a) => {\n    return a * degree;\n};\nexport const equals = (a, b) => {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n};\nexport const rand = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nexport const isPowerOfTwo = (value) => {\n    return value && !(value & (value - 1));\n};\nconst getTimingBezier = (a, b, c, d) => {\n    const xc = 3.0 * a;\n    const xb = 3.0 * (c - a) - xc;\n    const xa = 1.0 - xc - xb;\n    const yc = 3.0 * b;\n    const yb = 3.0 * (d - b) - yc;\n    const ya = 1.0 - yc - yb;\n    return function (time) {\n        if (time >= 1.0) {\n            return 1;\n        }\n        if (time <= 0) {\n            return 0;\n        }\n        let t = 0.5, cbx, cbxd, dx;\n        for (let it = 0; it < 20; it++) {\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                return t * (t * (t * ya + yb) + yc);\n            }\n            // Cubic bezier derivative.\n            cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n            t += dx / cbxd;\n        }\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc);\n            }\n            if (dx < 0) {\n                maxT = t;\n            }\n            else {\n                minT = t;\n            }\n        }\n    };\n};\nexport const getTimingFunction = memo((str) => {\n    switch (str) {\n        case 'linear':\n            return function (time) {\n                return time;\n            };\n        case 'ease':\n            return getTimingBezier(0.25, 0.1, 0.25, 1.0);\n        case 'ease-in':\n            return getTimingBezier(0.42, 0, 1.0, 1.0);\n        case 'ease-out':\n            return getTimingBezier(0, 0, 0.58, 1.0);\n        case 'ease-in-out':\n            return getTimingBezier(0.42, 0, 0.58, 1.0);\n        case 'ease-in-sine':\n            return getTimingBezier(0.12, 0, 0.39, 0);\n        case 'ease-out-sine':\n            return getTimingBezier(0.12, 0, 0.39, 0);\n        case 'ease-in-out-sine':\n            return getTimingBezier(0.37, 0, 0.63, 1);\n        case 'ease-in-cubic':\n            return getTimingBezier(0.32, 0, 0.67, 0);\n        case 'ease-out-cubic':\n            return getTimingBezier(0.33, 1, 0.68, 1);\n        case 'ease-in-out-cubic':\n            return getTimingBezier(0.65, 0, 0.35, 1);\n        case 'ease-in-circ':\n            return getTimingBezier(0.55, 0, 1, 0.45);\n        case 'ease-out-circ':\n            return getTimingBezier(0, 0.55, 0.45, 1);\n        case 'ease-in-out-circ':\n            return getTimingBezier(0.85, 0, 0.15, 1);\n        case 'ease-in-back':\n            return getTimingBezier(0.36, 0, 0.66, -0.56);\n        case 'ease-out-back':\n            return getTimingBezier(0.34, 1.56, 0.64, 1);\n        case 'ease-in-out-back':\n            return getTimingBezier(0.68, -0.6, 0.32, 1.6);\n        case 'step-start':\n            return function () {\n                return 1;\n            };\n        case 'step-end':\n            return function (time) {\n                return time === 1 ? 1 : 0;\n            };\n        default:\n            // eslint-disable-next-line no-case-declarations\n            const s = 'cubic-bezier(';\n            if (str && str.indexOf(s) === 0) {\n                const parts = str\n                    .substr(s.length, str.length - s.length - 1)\n                    .split(',');\n                if (parts.length !== 4) {\n                    console.warn('Unknown timing function: ' + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time;\n                    };\n                }\n                const a = parseFloat(parts[0] || '0.42');\n                const b = parseFloat(parts[1] || '0');\n                const c = parseFloat(parts[2] || '1');\n                const d = parseFloat(parts[3] || '1');\n                if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                    console.warn(' Unknown timing function: ' + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time;\n                    };\n                }\n                return getTimingBezier(a, b, c, d);\n            }\n            else {\n                console.warn('Unknown timing function: ' + str);\n                // Fallback: use linear.\n                return function (time) {\n                    return time;\n                };\n            }\n    }\n});\nif (!Math.hypot)\n    Math.hypot = (...args) => {\n        let y = 0, i = args.length;\n        while (i--) {\n            y += args[i] * args[i];\n        }\n        return Math.sqrt(y);\n    };\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { isPowerOfTwo } from '../../utils.js';\nimport { CoreContextTexture } from '../CoreContextTexture.js';\nimport { isHTMLImageElement } from './internal/RendererUtils.js';\nconst TRANSPARENT_TEXTURE_DATA = new Uint8Array([0, 0, 0, 0]);\n/**\n * A wrapper around a WebGLTexture that handles loading the texture data\n * from a Texture source and uploading it to the GPU as well as freeing\n * the uploaded texture.\n *\n * @remarks\n * When accessing the ctxTexture property, the texture will be loaded if\n * it hasn't been already. ctxTexture will always return a valid WebGLTexture\n * and trigger the loading/uploading of the texture's data if it hasn't been\n * loaded yet.\n */\nexport class WebGlCoreCtxTexture extends CoreContextTexture {\n    glw;\n    _nativeCtxTexture = null;\n    _state = 'freed';\n    _w = 0;\n    _h = 0;\n    constructor(glw, memManager, textureSource) {\n        super(memManager, textureSource);\n        this.glw = glw;\n    }\n    get ctxTexture() {\n        if (this._state === 'freed') {\n            this.load();\n        }\n        assertTruthy(this._nativeCtxTexture);\n        return this._nativeCtxTexture;\n    }\n    get renderable() {\n        return this.textureSource.renderable;\n    }\n    get w() {\n        return this._w;\n    }\n    get h() {\n        return this._h;\n    }\n    /**\n     * Load the texture data from the Texture source and upload it to the GPU\n     *\n     * @remarks\n     * This method is called automatically when accessing the ctxTexture property\n     * if the texture hasn't been loaded yet. But it can also be called manually\n     * to force the texture to be pre-loaded prior to accessing the ctxTexture\n     * property.\n     */\n    load() {\n        // If the texture is already loading or loaded, don't load it again.\n        if (this._state === 'loading' || this._state === 'loaded') {\n            return;\n        }\n        this._state = 'loading';\n        this.textureSource.setState('loading');\n        this._nativeCtxTexture = this.createNativeCtxTexture();\n        this.onLoadRequest()\n            .then(({ width, height }) => {\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'loaded';\n            this._w = width;\n            this._h = height;\n            // Update the texture source's width and height so that it can be used\n            // for rendering.\n            this.textureSource.setState('loaded', { width, height });\n        })\n            .catch((err) => {\n            this._state = 'failed';\n            this.textureSource.setState('failed', err);\n            console.error(err);\n        });\n    }\n    /**\n     * Called when the texture data needs to be loaded and uploaded to a texture\n     */\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        // Set to a 1x1 transparent texture\n        glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        const textureData = await this.textureSource?.getTextureData();\n        // If the texture has been freed while loading, return early.\n        if (!this._nativeCtxTexture) {\n            assertTruthy(this._state === 'freed');\n            return { width: 0, height: 0 };\n        }\n        let width = 0;\n        let height = 0;\n        assertTruthy(this._nativeCtxTexture);\n        glw.activeTexture(0);\n        // If textureData is null, the texture is empty (0, 0) and we don't need to\n        // upload any data to the GPU.\n        if (textureData.data instanceof ImageBitmap ||\n            textureData.data instanceof ImageData ||\n            // not using typeof HTMLImageElement due to web worker\n            isHTMLImageElement(textureData.data)) {\n            const data = textureData.data;\n            width = data.width;\n            height = data.height;\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.pixelStorei(glw.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !!textureData.premultiplyAlpha);\n            glw.texImage2D(0, glw.RGBA, glw.RGBA, glw.UNSIGNED_BYTE, data);\n            memManager.setTextureMemUse(this, width * height * 4);\n            // generate mipmaps for power-of-2 textures or in WebGL2RenderingContext\n            if (glw.isWebGl2() || (isPowerOfTwo(width) && isPowerOfTwo(height))) {\n                glw.generateMipmap();\n            }\n        }\n        else if (textureData.data === null) {\n            width = 0;\n            height = 0;\n            // Reset to a 1x1 transparent texture\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, TRANSPARENT_TEXTURE_DATA);\n            memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        }\n        else if ('mipmaps' in textureData.data && textureData.data.mipmaps) {\n            const { mipmaps, width = 0, height = 0, type, glInternalFormat, } = textureData.data;\n            const view = type === 'ktx'\n                ? new DataView(mipmaps[0] ?? new ArrayBuffer(0))\n                : mipmaps[0];\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.compressedTexImage2D(0, glInternalFormat, width, height, 0, view);\n            glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n            glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n            memManager.setTextureMemUse(this, view.byteLength);\n        }\n        else {\n            console.error(`WebGlCoreCtxTexture.onLoadRequest: Unexpected textureData returned`, textureData);\n        }\n        return {\n            width,\n            height,\n        };\n    }\n    /**\n     * Free the WebGLTexture from the GPU\n     *\n     * @returns\n     */\n    free() {\n        if (this._state === 'freed') {\n            return;\n        }\n        this._state = 'freed';\n        this.textureSource.setState('freed');\n        this._w = 0;\n        this._h = 0;\n        if (!this._nativeCtxTexture) {\n            return;\n        }\n        const { glw, memManager } = this;\n        glw.deleteTexture(this._nativeCtxTexture);\n        memManager.setTextureMemUse(this, 0);\n        this._nativeCtxTexture = null;\n    }\n    /**\n     * Create native context texture\n     *\n     * @remarks\n     * When this method returns the returned texture will be bound to the GL context state.\n     *\n     * @param width\n     * @param height\n     * @returns\n     */\n    createNativeCtxTexture() {\n        const { glw } = this;\n        const nativeTexture = glw.createTexture();\n        if (!nativeTexture) {\n            throw new Error('Could not create WebGL Texture');\n        }\n        // On initial load request, create a 1x1 transparent texture to use until\n        // the texture data is finally loaded.\n        glw.activeTexture(0);\n        glw.bindTexture(nativeTexture);\n        // linear texture filtering\n        glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n        glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n        // texture wrapping method\n        glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n        glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n        return nativeTexture;\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\n/**\n * Texture consisting of only a 1x1 color pixel\n *\n * @remarks\n * The pixel color is set with the {@link ColorTextureProps.color} prop.\n *\n * This is the default texture used for a Node if it's\n * {@link INodeWritableProps.texture} prop is set to `null` (the default)\n *\n * Generally the 1x1 color pixel is stretched to whatever the set dimensions of\n * a Node are.\n */\nexport class ColorTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = ColorTexture.resolveDefaults(props || {});\n    }\n    get color() {\n        return this.props.color;\n    }\n    set color(color) {\n        this.props.color = color;\n    }\n    async getTextureData() {\n        const pixelData32 = new Uint32Array([this.color]);\n        const pixelData8 = new Uint8ClampedArray(pixelData32.buffer);\n        return {\n            data: new ImageData(pixelData8, 1, 1),\n            premultiplyAlpha: true,\n        };\n    }\n    static makeCacheKey(props) {\n        const resolvedProps = ColorTexture.resolveDefaults(props);\n        return `ColorTexture,${resolvedProps.color}`;\n    }\n    static resolveDefaults(props) {\n        return {\n            color: props.color || 0xffffffff,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=ColorTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture, } from './Texture.js';\n/**\n * A Texture that is a sub-region of another Texture.\n *\n * @remarks\n * The parent texture can be a Sprite Sheet/Texture Atlas and set using the\n * {@link SubTextureProps.texture} prop. The sub-region relative to the parent\n * texture is defined with the {@link SubTextureProps.x},\n * {@link SubTextureProps.y}, {@link SubTextureProps.width}, and\n * {@link SubTextureProps.height} pixel values.\n */\nexport class SubTexture extends Texture {\n    props;\n    parentTexture;\n    constructor(txManager, props) {\n        super(txManager);\n        this.parentTexture = this.txManager.loadTexture(props.texture.txType, props.texture.props, props.texture.options);\n        this.props = SubTexture.resolveDefaults(props || {});\n        // If parent texture is already loaded / failed, trigger loaded event manually\n        // so that users get a consistent event experience.\n        // We do this in a microtask to allow listeners to be attached in the same\n        // synchronous task after calling loadTexture()\n        queueMicrotask(() => {\n            const parentTx = this.parentTexture;\n            if (parentTx.state === 'loaded') {\n                this.onParentTxLoaded(parentTx, parentTx.dimensions);\n            }\n            else if (parentTx.state === 'failed') {\n                this.onParentTxFailed(parentTx, parentTx.error);\n            }\n            parentTx.on('loaded', this.onParentTxLoaded);\n            parentTx.on('failed', this.onParentTxFailed);\n        });\n    }\n    onParentTxLoaded = () => {\n        // We ignore the parent's passed dimensions, and simply use the SubTexture's\n        // configured dimensions (because that's all that matters here)\n        this.setState('loaded', {\n            width: this.props.width,\n            height: this.props.height,\n        });\n    };\n    onParentTxFailed = (target, error) => {\n        this.setState('failed', error);\n    };\n    async getTextureData() {\n        return {\n            data: this.props,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {\n            texture: props.texture,\n            x: props.x || 0,\n            y: props.y || 0,\n            width: props.width || 0,\n            height: props.height || 0,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=SubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxSubTexture extends WebGlCoreCtxTexture {\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n    }\n    async onLoadRequest() {\n        const props = await this.textureSource.getTextureData();\n        return {\n            width: props.data?.width || 0,\n            height: props.data?.height || 0,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxSubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a collection of WebGL Buffers along with their associated\n * vertex attribute formats.\n */\nexport class BufferCollection {\n    config;\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * Get the WebGLBuffer associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getBuffer(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])?.buffer;\n    }\n    /**\n     * Get the AttributeInfo associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getAttributeInfo(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])\n            ?.attributes[attributeName];\n    }\n}\n//# sourceMappingURL=BufferCollection.js.map","/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport { assertTruthy } from '../../utils.js';\nimport { isWebGl2 } from '../renderers/webgl/internal/WebGlUtils.js';\n/**\n * Optimized WebGL Context Wrapper\n *\n * @remarks\n * This class contains the subset of the WebGLRenderingContext & WebGL2RenderingContext\n * API that is used by the renderer. Select high volume WebGL methods include\n * caching optimizations to avoid making WebGL calls if the state is already set\n * to the desired value.\n *\n * While most methods contained are direct passthroughs to the WebGL context,\n * some methods combine multiple WebGL calls into one for convenience, modify\n * arguments to be more convenient, or are replaced by more specific methods.\n *\n * Not all methods are optimized. Only methods that are called frequently\n * and/or have a high cost are optimized.\n *\n * A subset of GLenum constants are also exposed as properties on this class\n * for convenience.\n */\nexport class WebGlContextWrapper {\n    gl;\n    //#region Cached WebGL State\n    activeTextureUnit = 0;\n    texture2dUnits;\n    texture2dParams = new WeakMap();\n    scissorEnabled;\n    scissorX;\n    scissorY;\n    scissorWidth;\n    scissorHeight;\n    blendEnabled;\n    blendSrcRgb;\n    blendDstRgb;\n    blendSrcAlpha;\n    blendDstAlpha;\n    boundArrayBuffer;\n    boundElementArrayBuffer;\n    curProgram;\n    programUniforms = new WeakMap();\n    //#endregion Cached WebGL State\n    //#region Canvas\n    canvas;\n    //#endregion Canvas\n    //#region WebGL Enums\n    MAX_RENDERBUFFER_SIZE;\n    MAX_TEXTURE_SIZE;\n    MAX_VIEWPORT_DIMS;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n    MAX_TEXTURE_IMAGE_UNITS;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n    MAX_VERTEX_ATTRIBS;\n    MAX_VARYING_VECTORS;\n    MAX_VERTEX_UNIFORM_VECTORS;\n    MAX_FRAGMENT_UNIFORM_VECTORS;\n    TEXTURE_MAG_FILTER;\n    TEXTURE_MIN_FILTER;\n    TEXTURE_WRAP_S;\n    TEXTURE_WRAP_T;\n    LINEAR;\n    CLAMP_TO_EDGE;\n    RGBA;\n    UNSIGNED_BYTE;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n    UNPACK_FLIP_Y_WEBGL;\n    FLOAT;\n    TRIANGLES;\n    UNSIGNED_SHORT;\n    ONE;\n    ONE_MINUS_SRC_ALPHA;\n    VERTEX_SHADER;\n    FRAGMENT_SHADER;\n    STATIC_DRAW;\n    COMPILE_STATUS;\n    LINK_STATUS;\n    DYNAMIC_DRAW;\n    COLOR_ATTACHMENT0;\n    //#endregion WebGL Enums\n    constructor(gl) {\n        this.gl = gl;\n        // The following code extracts the current state of the WebGL context\n        // to our local JavaScript cached version of it. This is so we can\n        // avoid making WebGL calls if we don't need to.\n        // We could assume that the WebGL context is in a default state, but\n        // in the future we may want to support restoring a broken WebGL context\n        // and this will help with that.\n        this.activeTextureUnit =\n            gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n        const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        // save current texture units\n        this.texture2dUnits = new Array(maxTextureUnits)\n            .fill(undefined)\n            .map((_, i) => {\n            this.activeTexture(i);\n            return gl.getParameter(gl.TEXTURE_BINDING_2D);\n        });\n        // restore active texture unit\n        this.activeTexture(this.activeTextureUnit);\n        this.scissorEnabled = gl.isEnabled(gl.SCISSOR_TEST);\n        const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\n        this.scissorX = scissorBox[0];\n        this.scissorY = scissorBox[1];\n        this.scissorWidth = scissorBox[2];\n        this.scissorHeight = scissorBox[3];\n        this.blendEnabled = gl.isEnabled(gl.BLEND);\n        this.blendSrcRgb = gl.getParameter(gl.BLEND_SRC_RGB);\n        this.blendDstRgb = gl.getParameter(gl.BLEND_DST_RGB);\n        this.blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n        this.blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n        this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        this.canvas = gl.canvas;\n        // Extract GLenums\n        this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;\n        this.MAX_TEXTURE_SIZE = gl.MAX_TEXTURE_SIZE;\n        this.MAX_VIEWPORT_DIMS = gl.MAX_VIEWPORT_DIMS;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.MAX_TEXTURE_IMAGE_UNITS = gl.MAX_TEXTURE_IMAGE_UNITS;\n        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n        this.MAX_VERTEX_ATTRIBS = gl.MAX_VERTEX_ATTRIBS;\n        this.MAX_VARYING_VECTORS = gl.MAX_VARYING_VECTORS;\n        this.MAX_VERTEX_UNIFORM_VECTORS = gl.MAX_VERTEX_UNIFORM_VECTORS;\n        this.MAX_FRAGMENT_UNIFORM_VECTORS = gl.MAX_FRAGMENT_UNIFORM_VECTORS;\n        this.TEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;\n        this.TEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;\n        this.TEXTURE_WRAP_S = gl.TEXTURE_WRAP_S;\n        this.TEXTURE_WRAP_T = gl.TEXTURE_WRAP_T;\n        this.LINEAR = gl.LINEAR;\n        this.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;\n        this.RGBA = gl.RGBA;\n        this.UNSIGNED_BYTE = gl.UNSIGNED_BYTE;\n        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n        this.UNPACK_FLIP_Y_WEBGL = gl.UNPACK_FLIP_Y_WEBGL;\n        this.FLOAT = gl.FLOAT;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.ONE = gl.ONE;\n        this.ONE_MINUS_SRC_ALPHA = gl.ONE_MINUS_SRC_ALPHA;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.VERTEX_SHADER = gl.VERTEX_SHADER;\n        this.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n        this.STATIC_DRAW = gl.STATIC_DRAW;\n        this.COMPILE_STATUS = gl.COMPILE_STATUS;\n        this.LINK_STATUS = gl.LINK_STATUS;\n        this.DYNAMIC_DRAW = gl.DYNAMIC_DRAW;\n        this.COLOR_ATTACHMENT0 = gl.COLOR_ATTACHMENT0;\n    }\n    /**\n     * Returns true if the WebGL context is WebGL2\n     *\n     * @returns\n     */\n    isWebGl2() {\n        return isWebGl2(this.gl);\n    }\n    /**\n     * ```\n     * gl.activeTexture(textureUnit + gl.TEXTURE0);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: `textureUnit` is based from 0, not `gl.TEXTURE0`.\n     *\n     * @param textureUnit\n     */\n    activeTexture(textureUnit) {\n        const { gl } = this;\n        if (this.activeTextureUnit !== textureUnit) {\n            gl.activeTexture(textureUnit + gl.TEXTURE0);\n            this.activeTextureUnit = textureUnit;\n        }\n    }\n    /**\n     * ```\n     * gl.bindTexture(gl.TEXTURE_2D, texture);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param texture\n     */\n    bindTexture(texture) {\n        const { gl, activeTextureUnit, texture2dUnits } = this;\n        if (texture2dUnits[activeTextureUnit] === texture) {\n            return;\n        }\n        texture2dUnits[activeTextureUnit] = texture;\n        gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    }\n    _getActiveTexture() {\n        const { activeTextureUnit, texture2dUnits } = this;\n        return texture2dUnits[activeTextureUnit];\n    }\n    /**\n     * ```\n     * gl.texParameteri(gl.TEXTURE_2D, pname, param);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param pname\n     * @param param\n     * @returns\n     */\n    texParameteri(pname, param) {\n        const { gl, texture2dParams } = this;\n        const activeTexture = this._getActiveTexture();\n        if (!activeTexture) {\n            throw new Error('No active texture');\n        }\n        let textureParams = texture2dParams.get(activeTexture);\n        if (!textureParams) {\n            textureParams = {};\n            texture2dParams.set(activeTexture, textureParams);\n        }\n        if (textureParams[pname] === param) {\n            return;\n        }\n        textureParams[pname] = param;\n        gl.texParameteri(gl.TEXTURE_2D, pname, param);\n    }\n    texImage2D(level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels) {\n        const { gl } = this;\n        if (format) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource);\n        }\n    }\n    /**\n     * ```\n     * gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, data);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    compressedTexImage2D(level, internalformat, width, height, border, data) {\n        const { gl } = this;\n        gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalformat, width, height, border, data);\n    }\n    /**\n     * ```\n     * gl.pixelStorei(pname, param);\n     * ```\n     *\n     * @param pname\n     * @param param\n     */\n    pixelStorei(pname, param) {\n        const { gl } = this;\n        gl.pixelStorei(pname, param);\n    }\n    /**\n     * ```\n     * gl.generateMipmap(gl.TEXTURE_2D);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    generateMipmap() {\n        const { gl } = this;\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    /**\n     * ```\n     * gl.createTexture();\n     * ```\n     *\n     * @returns\n     */\n    createTexture() {\n        const { gl } = this;\n        return gl.createTexture();\n    }\n    /**\n     * ```\n     * gl.deleteTexture(texture);\n     * ```\n     *\n     * @param texture\n     */\n    deleteTexture(texture) {\n        const { gl } = this;\n        if (texture) {\n            this.texture2dParams.delete(texture);\n        }\n        gl.deleteTexture(texture);\n    }\n    /**\n     * ```\n     * gl.viewport(x, y, width, height);\n     * ```\n     */\n    viewport(x, y, width, height) {\n        const { gl } = this;\n        gl.viewport(x, y, width, height);\n    }\n    /**\n     * ```\n     * gl.clearColor(red, green, blue, alpha);\n     * ```\n     *\n     * @param red\n     * @param green\n     * @param blue\n     * @param alpha\n     */\n    clearColor(red, green, blue, alpha) {\n        const { gl } = this;\n        gl.clearColor(red, green, blue, alpha);\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.SCISSOR_TEST);\n     * ```\n     * @param enable\n     */\n    setScissorTest(enable) {\n        const { gl, scissorEnabled } = this;\n        if (enable === scissorEnabled) {\n            return;\n        }\n        if (enable) {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n        else {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n        this.scissorEnabled = enable;\n    }\n    /**\n     * ```\n     * gl.scissor(x, y, width, height);\n     * ```\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    scissor(x, y, width, height) {\n        const { gl, scissorX, scissorY, scissorWidth, scissorHeight } = this;\n        if (x !== scissorX ||\n            y !== scissorY ||\n            width !== scissorWidth ||\n            height !== scissorHeight) {\n            gl.scissor(x, y, width, height);\n            this.scissorX = x;\n            this.scissorY = y;\n            this.scissorWidth = width;\n            this.scissorHeight = height;\n        }\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.BLEND);\n     * ```\n     *\n     * @param blend\n     * @returns\n     */\n    setBlend(blend) {\n        const { gl, blendEnabled } = this;\n        if (blend === blendEnabled) {\n            return;\n        }\n        if (blend) {\n            gl.enable(gl.BLEND);\n        }\n        else {\n            gl.disable(gl.BLEND);\n        }\n        this.blendEnabled = blend;\n    }\n    /**\n     * ```\n     * gl.blendFunc(src, dst);\n     * ```\n     *\n     * @param src\n     * @param dst\n     */\n    blendFunc(src, dst) {\n        const { gl, blendSrcRgb, blendDstRgb, blendSrcAlpha, blendDstAlpha } = this;\n        if (src !== blendSrcRgb ||\n            dst !== blendDstRgb ||\n            src !== blendSrcAlpha ||\n            dst !== blendDstAlpha) {\n            gl.blendFunc(src, dst);\n            this.blendSrcRgb = src;\n            this.blendDstRgb = dst;\n            this.blendSrcAlpha = src;\n            this.blendDstAlpha = dst;\n        }\n    }\n    /**\n     * ```\n     * gl.createBuffer();\n     * ```\n     *\n     * @returns\n     */\n    createBuffer() {\n        const { gl } = this;\n        return gl.createBuffer();\n    }\n    /**\n     * ```\n     * gl.createFramebuffer();\n     * ```\n     * @returns\n     */\n    createFramebuffer() {\n        const { gl } = this;\n        return gl.createFramebuffer();\n    }\n    /**\n     * ```\n     * gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n     * ```\n     *\n     * @param framebuffer\n     */\n    bindFramebuffer(framebuffer) {\n        const { gl } = this;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n    /**\n     * ```\n     * gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.FRAMEBUFFER` and textarget is always `gl.TEXTURE_2D`\n     */\n    framebufferTexture2D(attachment, texture, level) {\n        const { gl } = this;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, level);\n    }\n    /**\n     * ```\n     * gl.clear(gl.COLOR_BUFFER_BIT);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Clear mask is always `gl.COLOR_BUFFER_BIT`\n     */\n    clear() {\n        const { gl } = this;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    arrayBufferData(buffer, data, usage) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n     * ```\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    elementArrayBufferData(buffer, data, usage) {\n        const { gl, boundElementArrayBuffer } = this;\n        if (boundElementArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            this.boundElementArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.vertexAttribPointer` are combined into one function.\n     *\n     * @param buffer\n     * @param index\n     * @param size\n     * @param type\n     * @param normalized\n     * @param stride\n     * @param offset\n     */\n    vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n    /**\n     * ```\n     * gl.useProgram(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    useProgram(program) {\n        const { gl, curProgram } = this;\n        if (curProgram === program) {\n            return;\n        }\n        gl.useProgram(program);\n        this.curProgram = program;\n    }\n    setUniform(type, location, ...args) {\n        const { gl, programUniforms } = this;\n        let uniforms = programUniforms.get(this.curProgram);\n        if (!uniforms) {\n            uniforms = new Map();\n            programUniforms.set(this.curProgram, uniforms);\n        }\n        const uniformArgs = uniforms.get(location);\n        if (!uniformArgs || !compareArrays(uniformArgs, args)) {\n            uniforms.set(location, args);\n            gl[type](location, ...args);\n        }\n    }\n    /**\n     * ```\n     * gl.getParameter(pname);\n     * ```\n     *\n     * @param pname\n     * @returns\n     */\n    getParameter(pname) {\n        const { gl } = this;\n        return gl.getParameter(pname);\n    }\n    /**\n     * ```\n     * gl.drawElements(mode, count, type, offset);\n     * ```\n     *\n     * @param mode\n     * @param count\n     * @param type\n     * @param offset\n     */\n    drawElements(mode, count, type, offset) {\n        const { gl } = this;\n        gl.drawElements(mode, count, type, offset);\n    }\n    /**\n     * ```\n     * gl.drawArrays(mode, first, count);\n     * ```\n     *\n     * @param name\n     * @returns\n     */\n    getExtension(name) {\n        const { gl } = this;\n        return gl.getExtension(name);\n    }\n    /**\n     * ```\n     * gl.createVertexArray();\n     * ```\n     *\n     * @returns\n     */\n    createVertexArray() {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        return gl.createVertexArray();\n    }\n    /**\n     * ```\n     * gl.bindVertexArray(vertexArray);\n     * ```\n     *\n     * @param vertexArray\n     */\n    bindVertexArray(vertexArray) {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        gl.bindVertexArray(vertexArray);\n    }\n    /**\n     * ```\n     * gl.getAttribLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getAttribLocation(program, name) {\n        const { gl } = this;\n        return gl.getAttribLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.getUniformLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getUniformLocation(program, name) {\n        const { gl } = this;\n        return gl.getUniformLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.enableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    enableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.enableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.disableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    disableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.disableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.createShader(type);\n     * ```\n     *\n     * @param type\n     * @returns\n     */\n    createShader(type) {\n        const { gl } = this;\n        return gl.createShader(type);\n    }\n    /**\n     * ```\n     * gl.compileShader(shader);\n     * ```\n     *\n     * @param shader\n     * @returns\n     */\n    compileShader(shader) {\n        const { gl } = this;\n        gl.compileShader(shader);\n    }\n    /**\n     * ```\n     * gl.attachShader(program, shader);\n     * ```\n     *\n     * @param program\n     * @param shader\n     */\n    attachShader(program, shader) {\n        const { gl } = this;\n        gl.attachShader(program, shader);\n    }\n    /**\n     * ```\n     * gl.linkProgram(program);\n     * ```\n     *\n     * @param program\n     */\n    linkProgram(program) {\n        const { gl } = this;\n        gl.linkProgram(program);\n    }\n    /**\n     * ```\n     * gl.deleteProgram(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteProgram(shader) {\n        const { gl } = this;\n        gl.deleteProgram(shader);\n    }\n    /**\n     * ```\n     * gl.getShaderParameter(shader, pname);\n     * ```\n     *\n     * @param shader\n     * @param pname\n     */\n    getShaderParameter(shader, pname) {\n        const { gl } = this;\n        return gl.getShaderParameter(shader, pname);\n    }\n    /**\n     * ```\n     * gl.getShaderInfoLog(shader);\n     * ```\n     *\n     * @param shader\n     */\n    getShaderInfoLog(shader) {\n        const { gl } = this;\n        return gl.getShaderInfoLog(shader);\n    }\n    /**\n     * ```\n     * gl.createProgram();\n     * ```\n     *\n     * @returns\n     */\n    createProgram() {\n        const { gl } = this;\n        return gl.createProgram();\n    }\n    /**\n     * ```\n     * gl.getProgramParameter(program, pname);\n     * ```\n     *\n     * @param program\n     * @param pname\n     * @returns\n     */\n    getProgramParameter(program, pname) {\n        const { gl } = this;\n        return gl.getProgramParameter(program, pname);\n    }\n    /**\n     * ```\n     * gl.getProgramInfoLog(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    getProgramInfoLog(program) {\n        const { gl } = this;\n        return gl.getProgramInfoLog(program);\n    }\n    /**\n     * ```\n     * gl.shaderSource(shader, source);\n     * ```\n     *\n     * @param shader\n     * @param source\n     */\n    shaderSource(shader, source) {\n        const { gl } = this;\n        gl.shaderSource(shader, source);\n    }\n    /**\n     * ```\n     * gl.deleteShader(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteShader(shader) {\n        const { gl } = this;\n        gl.deleteShader(shader);\n    }\n}\n/**\n * Compare two arrays for equality.\n *\n * @remarks\n * This function will not try to compare nested arrays or Float32Arrays and\n * instead will always return false when they are encountered.\n *\n * @param a\n * @param b\n * @returns\n */\nexport function compareArrays(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((v, i) => {\n        // Don't bother to compare nested arrays or Float32Arrays\n        if (Array.isArray(v) || v instanceof Float32Array) {\n            return false;\n        }\n        else {\n            return v === b[i];\n        }\n    });\n}\n//# sourceMappingURL=WebGlContextWrapper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\nexport class RenderTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = RenderTexture.resolveDefaults(props || {});\n    }\n    get width() {\n        return this.props.width;\n    }\n    set width(value) {\n        this.props.width = value;\n    }\n    get height() {\n        return this.props.height;\n    }\n    set height(value) {\n        this.props.height = value;\n    }\n    async getTextureData() {\n        return {\n            data: null,\n            premultiplyAlpha: null,\n        };\n    }\n    static resolveDefaults(props) {\n        return {\n            width: props.width || 256,\n            height: props.height || 256,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=RenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxRenderTexture extends WebGlCoreCtxTexture {\n    framebuffer;\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n        // Create Framebuffer object\n        const framebuffer = glw.createFramebuffer();\n        assertTruthy(framebuffer, 'Unable to create framebuffer');\n        this.framebuffer = framebuffer;\n    }\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        const nativeTexture = (this._nativeCtxTexture =\n            this.createNativeCtxTexture());\n        const { width, height } = this.textureSource;\n        // Set the dimensions of the render texture\n        glw.texImage2D(0, glw.RGBA, width, height, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        // Update the texture memory manager\n        memManager.setTextureMemUse(this, width * height * 4);\n        // Bind the framebuffer\n        glw.bindFramebuffer(this.framebuffer);\n        // Attach the texture to the framebuffer\n        glw.framebufferTexture2D(glw.COLOR_ATTACHMENT0, nativeTexture, 0);\n        // Unbind the framebuffer\n        glw.bindFramebuffer(null);\n        return {\n            width,\n            height,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxRenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, createWebGLContext, hasOwn, mergeColorAlphaPremultiplied, } from '../../../utils.js';\nimport { CoreRenderer } from '../CoreRenderer.js';\nimport { WebGlCoreRenderOp } from './WebGlCoreRenderOp.js';\nimport { createIndexBuffer, getWebGlParameters, getWebGlExtensions, } from './internal/RendererUtils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nimport { Texture } from '../../textures/Texture.js';\nimport { ColorTexture } from '../../textures/ColorTexture.js';\nimport { SubTexture } from '../../textures/SubTexture.js';\nimport { WebGlCoreCtxSubTexture } from './WebGlCoreCtxSubTexture.js';\nimport { CoreShaderManager } from '../../CoreShaderManager.js';\nimport { BufferCollection } from './internal/BufferCollection.js';\nimport { compareRect, getNormalizedRgbaComponents, } from '../../lib/utils.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nimport { RoundedRectangle } from './shaders/RoundedRectangle.js';\nimport { ContextSpy } from '../../lib/ContextSpy.js';\nimport { WebGlContextWrapper } from '../../lib/WebGlContextWrapper.js';\nimport { RenderTexture } from '../../textures/RenderTexture.js';\nimport { WebGlCoreCtxRenderTexture } from './WebGlCoreCtxRenderTexture.js';\nconst WORDS_PER_QUAD = 24;\nconst BYTES_PER_QUAD = WORDS_PER_QUAD * 4;\nexport class WebGlCoreRenderer extends CoreRenderer {\n    //// WebGL Native Context and Data\n    glw;\n    system;\n    //// Core Managers\n    txManager;\n    txMemManager;\n    shManager;\n    //// Options\n    options;\n    //// Persistent data\n    quadBuffer = new ArrayBuffer(1024 * 1024 * 4);\n    fQuadBuffer = new Float32Array(this.quadBuffer);\n    uiQuadBuffer = new Uint32Array(this.quadBuffer);\n    renderOps = [];\n    //// Render Op / Buffer Filling State\n    curBufferIdx = 0;\n    curRenderOp = null;\n    rttNodes = [];\n    activeRttNode = null;\n    //// Default Shader\n    defaultShader;\n    quadBufferCollection;\n    /**\n     * White pixel texture used by default when no texture is specified.\n     */\n    defaultTexture;\n    /**\n     * Whether the renderer is currently rendering to a texture.\n     */\n    renderToTextureActive = false;\n    constructor(options) {\n        super(options.stage);\n        const { canvas, clearColor, bufferMemory } = options;\n        this.options = options;\n        this.txManager = options.txManager;\n        this.txMemManager = options.txMemManager;\n        this.shManager = options.shManager;\n        this.defaultTexture = new ColorTexture(this.txManager);\n        // When the default texture is loaded, request a render in case the\n        // RAF is paused. Fixes: https://github.com/lightning-js/renderer/issues/123\n        this.defaultTexture.once('loaded', () => {\n            this.stage.requestRender();\n        });\n        const gl = createWebGLContext(canvas, options.contextSpy);\n        const glw = (this.glw = new WebGlContextWrapper(gl));\n        const color = getNormalizedRgbaComponents(clearColor);\n        glw.viewport(0, 0, canvas.width, canvas.height);\n        glw.clearColor(color[0], color[1], color[2], color[3]);\n        glw.setBlend(true);\n        glw.blendFunc(glw.ONE, glw.ONE_MINUS_SRC_ALPHA);\n        createIndexBuffer(glw, bufferMemory);\n        this.system = {\n            parameters: getWebGlParameters(this.glw),\n            extensions: getWebGlExtensions(this.glw),\n        };\n        this.shManager.renderer = this;\n        this.defaultShader = this.shManager.loadShader('DefaultShader').shader;\n        const quadBuffer = glw.createBuffer();\n        assertTruthy(quadBuffer);\n        const stride = 6 * Float32Array.BYTES_PER_ELEMENT;\n        this.quadBufferCollection = new BufferCollection([\n            {\n                buffer: quadBuffer,\n                attributes: {\n                    a_position: {\n                        name: 'a_position',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 0, // start at the beginning of the buffer\n                    },\n                    a_textureCoordinate: {\n                        name: 'a_textureCoordinate',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 2 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_color: {\n                        name: 'a_color',\n                        size: 4,\n                        type: glw.UNSIGNED_BYTE,\n                        normalized: true,\n                        stride,\n                        offset: 4 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_textureIndex: {\n                        name: 'a_textureIndex',\n                        size: 1,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 5 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                },\n            },\n        ]);\n    }\n    reset() {\n        const { glw } = this;\n        this.curBufferIdx = 0;\n        this.curRenderOp = null;\n        this.renderOps.length = 0;\n        glw.setScissorTest(false);\n        glw.clear();\n    }\n    getShaderManager() {\n        return this.shManager;\n    }\n    createCtxTexture(textureSource) {\n        if (textureSource instanceof SubTexture) {\n            return new WebGlCoreCtxSubTexture(this.glw, this.txMemManager, textureSource);\n        }\n        else if (textureSource instanceof RenderTexture) {\n            return new WebGlCoreCtxRenderTexture(this.glw, this.txMemManager, textureSource);\n        }\n        return new WebGlCoreCtxTexture(this.glw, this.txMemManager, textureSource);\n    }\n    /**\n     * This function adds a quad (a rectangle composed of two triangles) to the WebGL rendering pipeline.\n     *\n     * It takes a set of options that define the quad's properties, such as its dimensions, colors, texture, shader, and transformation matrix.\n     * The function first updates the shader properties with the current dimensions if necessary, then sets the default texture if none is provided.\n     * It then checks if a new render operation is needed, based on the current shader and clipping rectangle.\n     * If a new render operation is needed, it creates one and updates the current render operation.\n     * The function then adjusts the texture coordinates based on the texture options and adds the texture to the texture manager.\n     *\n     * Finally, it calculates the vertices for the quad, taking into account any transformations, and adds them to the quad buffer.\n     * The function updates the length and number of quads in the current render operation, and updates the current buffer index.\n     */\n    addQuad(params) {\n        const { fQuadBuffer, uiQuadBuffer } = this;\n        const { width, height, colorTl, colorTr, colorBl, colorBr, textureOptions, shader, shaderProps, alpha, clippingRect, tx, ty, ta, tb, tc, td, rtt: renderToTexture, parentHasRenderTexture, framebufferDimensions, } = params;\n        let { texture } = params;\n        /**\n         * If the shader props contain any automatic properties, update it with the\n         * current dimensions that will be used to render the quad.\n         */\n        if (shaderProps && hasOwn(shaderProps, '$dimensions')) {\n            const dimensions = shaderProps.$dimensions;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            dimensions.width = width;\n            dimensions.height = height;\n        }\n        texture = texture ?? this.defaultTexture;\n        assertTruthy(texture instanceof Texture, 'Invalid texture type');\n        let { curBufferIdx: bufferIdx, curRenderOp } = this;\n        const targetDims = {\n            width,\n            height,\n        };\n        const targetShader = shader || this.defaultShader;\n        assertTruthy(targetShader instanceof WebGlCoreShader);\n        if (!this.reuseRenderOp(params)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.newRenderOp(targetShader, shaderProps, alpha, targetDims, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions);\n            curRenderOp = this.curRenderOp;\n            assertTruthy(curRenderOp);\n        }\n        const flipX = textureOptions?.flipX ?? false;\n        const flipY = textureOptions?.flipY ?? false;\n        let texCoordX1 = 0;\n        let texCoordY1 = 0;\n        let texCoordX2 = 1;\n        let texCoordY2 = 1;\n        if (texture instanceof SubTexture) {\n            const { x: tx, y: ty, width: tw, height: th } = texture.props;\n            const { width: parentW = 0, height: parentH = 0 } = texture.parentTexture\n                .dimensions || { width: 0, height: 0 };\n            texCoordX1 = tx / parentW;\n            texCoordX2 = texCoordX1 + tw / parentW;\n            texCoordY1 = ty / parentH;\n            texCoordY2 = texCoordY1 + th / parentH;\n            texture = texture.parentTexture;\n        }\n        // Flip texture coordinates if dictated by texture options\n        if (flipX) {\n            [texCoordX1, texCoordX2] = [texCoordX2, texCoordX1];\n        }\n        if (flipY) {\n            [texCoordY1, texCoordY2] = [texCoordY2, texCoordY1];\n        }\n        const { txManager } = this.stage;\n        const ctxTexture = txManager.getCtxTexture(texture);\n        assertTruthy(ctxTexture instanceof WebGlCoreCtxTexture);\n        const textureIdx = this.addTexture(ctxTexture, bufferIdx);\n        curRenderOp = this.curRenderOp;\n        assertTruthy(curRenderOp);\n        // render quad advanced\n        if (tb !== 0 || tc !== 0) {\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta;\n            fQuadBuffer[bufferIdx++] = ty + width * tc;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + width * tc + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        else {\n            // Calculate the right corner of the quad\n            // multiplied by the scale\n            const rightCornerX = tx + width * ta;\n            const rightCornerY = ty + height * td;\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = ty;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        // Update the length of the current render op\n        curRenderOp.length += WORDS_PER_QUAD;\n        curRenderOp.numQuads++;\n        this.curBufferIdx = bufferIdx;\n    }\n    /**\n     * Replace the existing RenderOp with a new one that uses the specified Shader\n     * and starts at the specified buffer index.\n     *\n     * @param shader\n     * @param bufferIdx\n     */\n    newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        const curRenderOp = new WebGlCoreRenderOp(this.glw, this.options, this.quadBufferCollection, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, 0, // Z-Index is only used for explictly added Render Ops\n        renderToTexture, parentHasRenderTexture, framebufferDimensions);\n        this.curRenderOp = curRenderOp;\n        this.renderOps.push(curRenderOp);\n    }\n    /**\n     * Add a texture to the current RenderOp. If the texture cannot be added to the\n     * current RenderOp, a new RenderOp will be created and the texture will be added\n     * to that one.\n     *\n     * If the texture cannot be added to the new RenderOp, an error will be thrown.\n     *\n     * @param texture\n     * @param bufferIdx\n     * @param recursive\n     * @returns Assigned Texture Index of the texture in the render op\n     */\n    addTexture(texture, bufferIdx, recursive) {\n        const { curRenderOp } = this;\n        assertTruthy(curRenderOp);\n        const textureIdx = curRenderOp.addTexture(texture);\n        // TODO: Refactor to be more DRY\n        if (textureIdx === 0xffffffff) {\n            if (recursive) {\n                throw new Error('Unable to add texture to render op');\n            }\n            const { shader, shaderProps, dimensions, clippingRect, alpha } = curRenderOp;\n            this.newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx);\n            return this.addTexture(texture, bufferIdx, true);\n        }\n        return textureIdx;\n    }\n    /**\n     * Test if the current Render operation can be reused for the specified parameters.\n     * @param params\n     * @returns\n     */\n    reuseRenderOp(params) {\n        const { shader, shaderProps, parentHasRenderTexture, rtt, clippingRect } = params;\n        const targetShader = shader || this.defaultShader;\n        // Switching shader program will require a new render operation\n        if (this.curRenderOp?.shader !== targetShader) {\n            return false;\n        }\n        // Switching clipping rect will require a new render operation\n        if (!compareRect(this.curRenderOp.clippingRect, clippingRect)) {\n            return false;\n        }\n        // Force new render operation if rendering to texture\n        // @todo: This needs to be improved, render operations could also be reused\n        // for rendering to texture\n        if (parentHasRenderTexture || rtt) {\n            return false;\n        }\n        // Check if the shader can batch the shader properties\n        if (this.curRenderOp.shader !== this.defaultShader &&\n            (!shaderProps ||\n                !this.curRenderOp.shader.canBatchShaderProps(this.curRenderOp.shaderProps, shaderProps))) {\n            return false;\n        }\n        // Render operation can be reused\n        return true;\n    }\n    /**\n     * add RenderOp to the render pipeline\n     */\n    addRenderOp(renderable) {\n        this.renderOps.push(renderable);\n        this.curRenderOp = null;\n    }\n    /**\n     * Render the current set of RenderOps to render to the specified surface.\n     *\n     * TODO: 'screen' is the only supported surface at the moment.\n     *\n     * @param surface\n     */\n    render(surface = 'screen') {\n        const { glw, quadBuffer } = this;\n        const arr = new Float32Array(quadBuffer, 0, this.curBufferIdx);\n        const buffer = this.quadBufferCollection.getBuffer('a_position') ?? null;\n        glw.arrayBufferData(buffer, arr, glw.STATIC_DRAW);\n        const doLog = false; // idx++ % 100 === 0;\n        if (doLog) {\n            console.log('renderOps', this.renderOps.length);\n        }\n        this.renderOps.forEach((renderOp, i) => {\n            if (doLog) {\n                console.log('Quads per operation', renderOp.numQuads);\n            }\n            renderOp.draw();\n        });\n    }\n    renderToTexture(node) {\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            if (this.rttNodes[i] === node) {\n                return;\n            }\n        }\n        // @todo: Better bottom up rendering order\n        this.rttNodes.unshift(node);\n    }\n    renderRTTNodes() {\n        const { glw } = this;\n        const { txManager } = this.stage;\n        // Render all associated RTT nodes to their textures\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            const node = this.rttNodes[i];\n            // Skip nodes that don't have RTT updates\n            if (!node || !node.hasRTTupdates) {\n                continue;\n            }\n            // Set the active RTT node to the current node\n            // So we can prevent rendering children of nested RTT nodes\n            this.activeRttNode = node;\n            assertTruthy(node.texture, 'RTT node missing texture');\n            const ctxTexture = txManager.getCtxTexture(node.texture);\n            assertTruthy(ctxTexture instanceof WebGlCoreCtxRenderTexture);\n            this.renderToTextureActive = true;\n            // Bind the the texture's framebuffer\n            glw.bindFramebuffer(ctxTexture.framebuffer);\n            glw.viewport(0, 0, ctxTexture.w, ctxTexture.h);\n            glw.clear();\n            // Render all associated quads to the texture\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (!child) {\n                    continue;\n                }\n                child.update(this.stage.deltaTime, {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    valid: false,\n                });\n                this.stage.addQuads(child);\n                child.hasRTTupdates = false;\n            }\n            // Render all associated quads to the texture\n            this.render();\n            // Reset render operations\n            this.renderOps.length = 0;\n            node.hasRTTupdates = false;\n        }\n        // Bind the default framebuffer\n        glw.bindFramebuffer(null);\n        glw.viewport(0, 0, this.glw.canvas.width, this.glw.canvas.height);\n        this.renderToTextureActive = false;\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const SpecialCodepoints = {\n    LINE_FEED: 0x0a,\n    CARRIAGE_RETURN: 0x0d,\n    SPACE: 0x20,\n    TAB: 0x09,\n    ZERO_WIDTH_SPACE: 0x200b,\n    ZERO_WIDTH_NON_JOINER: 0x200c,\n    ZERO_WIDTH_JOINER: 0x200d,\n    LEFT_TO_RIGHT_MARK: 0x200e,\n    RIGHT_TO_LEFT_MARK: 0x200f,\n    LEFT_TO_RIGHT_EMBEDDING: 0x202a,\n    RIGHT_TO_LEFT_EMBEDDING: 0x202b,\n    POP_DIRECTIONAL_FORMATTING: 0x202c,\n    LEFT_TO_RIGHT_OVERRIDE: 0x202d,\n    RIGHT_TO_LEFT_OVERRIDE: 0x202e,\n    LINE_SEPARATOR: 0x2028,\n    PARAGRAPH_SEPARATOR: 0x2029,\n    OBJECT_REPLACEMENT_CHARACTER: 0xfffc,\n    REPLACEMENT_CHARACTER: 0xfffd,\n    ZERO_WIDTH_NO_BREAK_SPACE: 0xfeff,\n    LEFT_TO_RIGHT_ISOLATE: 0x2066,\n    RIGHT_TO_LEFT_ISOLATE: 0x2067,\n    FIRST_STRONG_ISOLATE: 0x2068,\n    POP_DIRECTIONAL_ISOLATE: 0x2069,\n    INHIBIT_SYMMETRIC_SWAPPING: 0x206a,\n    ACTIVATE_SYMMETRIC_SWAPPING: 0x206b,\n    INHIBIT_ARABIC_FORM_SHAPING: 0x206c,\n    ACTIVATE_ARABIC_FORM_SHAPING: 0x206d,\n    NATIONAL_DIGIT_SHAPES: 0x206e,\n    NOMINAL_DIGIT_SHAPES: 0x206f,\n    LEFT_TO_RIGHT_BOUNDARY: 0x200e,\n    RIGHT_TO_LEFT_BOUNDARY: 0x200f,\n};\n//# sourceMappingURL=SpecialCodepoints.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class FontShaper {\n}\n//# sourceMappingURL=FontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SpecialCodepoints } from '../../../renderers/SdfTextRenderer/internal/SpecialCodepoints.js';\nimport { FontShaper, } from './FontShaper.js';\nexport class SdfFontShaper extends FontShaper {\n    data;\n    glyphMap;\n    kernings;\n    constructor(data, glyphMap) {\n        super();\n        this.data = data;\n        this.glyphMap = glyphMap;\n        const kernings = (this.kernings = {});\n        data.kernings.forEach((kerning) => {\n            const second = kerning.second;\n            const firsts = (kernings[second] = kernings[second] || {});\n            firsts[kerning.first] = kerning.amount;\n        });\n        this.kernings = kernings;\n    }\n    *shapeText(props, codepoints) {\n        let codepointResult;\n        let lastGlyphId = undefined;\n        while ((codepointResult = codepoints.peek()) && !codepointResult.done) {\n            const codepoint = codepointResult.value;\n            const glyph = this.glyphMap.get(codepoint);\n            codepoints.next();\n            if (glyph !== undefined) {\n                // We found a glyph for this codepoint\n                // Yield the mapped glyph info\n                /**\n                 * Kerning includes any possible additional letter spacing\n                 */\n                const kerning = lastGlyphId !== undefined\n                    ? (this.kernings[glyph.id]?.[lastGlyphId] || 0) +\n                        props.letterSpacing\n                    : 0;\n                lastGlyphId = glyph.id;\n                yield {\n                    mapped: true,\n                    glyphId: glyph.id,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                    xAdvance: glyph.xadvance + kerning,\n                    yAdvance: 0,\n                    xOffset: glyph.xoffset + kerning,\n                    yOffset: glyph.yoffset,\n                    xBearing: 0,\n                    yBearing: 0,\n                    width: glyph.width,\n                    height: glyph.height,\n                };\n            }\n            else {\n                // We didn't find a glyph for this codepoint\n                // Yield the unmapped codepoint info\n                // If this codepoint is a linebreak, we should reset the last glyph id\n                // so that the next glyph will not be kerned with the last glyph of the\n                // previous line.\n                if (codepoint === SpecialCodepoints.LINE_FEED) {\n                    lastGlyphId = undefined;\n                }\n                yield {\n                    mapped: false,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                };\n            }\n        }\n    }\n}\n//# sourceMappingURL=SdfFontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// import type { Renderer } from '../../../Renderer';\nimport { assertTruthy } from '../../../../utils.js';\nimport { WebGlCoreRenderer } from '../../../renderers/webgl/WebGlCoreRenderer.js';\nimport { ImageTexture } from '../../../textures/ImageTexture.js';\nimport { TrFontFace } from '../TrFontFace.js';\nimport { SdfFontShaper } from './internal/SdfFontShaper.js';\nexport class SdfTrFontFace extends TrFontFace {\n    type;\n    texture;\n    /**\n     * Height of the tallest character in the font including the whitespace above it\n     */\n    maxCharHeight = 0;\n    data;\n    shaper;\n    glyphMap = new Map();\n    constructor(fontFamily, descriptors, type, stage, atlasUrl, atlasDataUrl) {\n        super(fontFamily, descriptors);\n        this.type = type;\n        const renderer = stage.renderer;\n        assertTruthy(renderer instanceof WebGlCoreRenderer, 'SDF Font Faces can only be used with the WebGL Renderer');\n        this.texture = stage.txManager.loadTexture('ImageTexture', {\n            src: atlasUrl,\n            // IMPORTANT: The SDF shader requires the alpha channel to NOT be\n            // premultiplied on the atlas texture. If it is premultiplied, the\n            // rendering of SDF glyphs (especially single-channel SDF fonts) will\n            // be very jagged.\n            premultiplyAlpha: false,\n        }, {\n            preload: true,\n        });\n        this.texture.on('loaded', () => {\n            this.checkLoaded();\n        });\n        // Set this.data to the fetched data from dataUrl\n        fetch(atlasDataUrl)\n            .then(async (response) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.data = await response.json();\n            // Add all the glyphs to the glyph map\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let maxCharHeight = 0;\n            this.data.chars.forEach((glyph) => {\n                this.glyphMap.set(glyph.id, glyph);\n                const charHeight = glyph.yoffset + glyph.height;\n                if (charHeight > maxCharHeight) {\n                    maxCharHeight = charHeight;\n                }\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.maxCharHeight = maxCharHeight;\n            // We know `data` is defined here, because we just set it\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.shaper = new SdfFontShaper(this.data, this.glyphMap);\n            this.checkLoaded();\n        })\n            .catch(console.error);\n    }\n    getAtlasEntry(glyphId) {\n        const glyph = this.glyphMap.get(glyphId);\n        if (glyph === undefined) {\n            throw new Error(`Glyph ${glyphId} not found in font ${this.fontFamily}`);\n        }\n        return {\n            x: glyph.x,\n            y: glyph.y,\n            width: glyph.width,\n            height: glyph.height,\n        };\n    }\n    checkLoaded() {\n        if (this.loaded)\n            return;\n        if (this.texture.state === 'loaded' && this.data) {\n            this.loaded = true;\n            this.emit('loaded');\n        }\n    }\n}\n//# sourceMappingURL=SdfTrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class for Core extensions.\n *\n * @remarks\n * Core extensions are used to extend the Core Renderer with custom code such as\n * custom fonts, custom shaders, custom textures, custom animation functions,\n * and more.\n */\nexport class CoreExtension {\n}\n//# sourceMappingURL=CoreExtension.js.map"],"names":["memo","width","height","tx","ty","i"],"mappings":"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","x_google_ignoreList":[14]}