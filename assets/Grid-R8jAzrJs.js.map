{"version":3,"file":"Grid-R8jAzrJs.js","sources":["../../node_modules/.pnpm/@lightningtv+solid@2.0.1_solid-js@1.8.20_patch_hash=57rsfwldt3tegsvhmqog75grya_/node_modules/@lightningtv/solid/src/primitives/createInfiniteItems.ts","../../src/pages/gridStyles.ts","../../src/pages/Grid.tsx"],"sourcesContent":["import {\n  type Accessor,\n  batch,\n  type Setter,\n  createComputed,\n  createResource,\n  createSignal,\n} from 'solid-js';\n\n// Adopted from https://github.com/solidjs-community/solid-primitives/blob/main/packages/pagination/src/index.ts\n// As we don't have intersection observer in Lightning, we can't use the original implementation\n\n/**\n * Provides an easy way to implement infinite items.\n *\n * ```ts\n * const [items, loader, { item, setItem, setItems, end, setEnd }] = createInfiniteScroll(fetcher);\n * ```\n * @param fetcher `(item: number) => Promise<T[]>`\n * @return `items()` is an accessor contains array of contents\n * @property `items.loading` is a boolean indicator for the loading state\n * @property `items.error` contains any error encountered\n * @method `page` is an accessor that contains page number\n * @method `setPage` allows to manually change the page number\n * @method `setItems` allows to manually change the contents of the item\n * @method `end` is a boolean indicator for end of the item\n * @method `setEnd` allows to manually change the end\n */\nexport function createInfiniteItems<T>(\n  fetcher: (item: number) => Promise<T[]>,\n): [\n  items: Accessor<T[]>,\n  options: {\n    page: Accessor<number>;\n    setPage: Setter<number>;\n    setItems: Setter<T[]>;\n    end: Accessor<boolean>;\n    setEnd: Setter<boolean>;\n  },\n] {\n  const [items, setItems] = createSignal<T[]>([]);\n  const [page, setPage] = createSignal(0);\n  const [end, setEnd] = createSignal(false);\n\n  const [contents] = createResource(page, fetcher);\n\n  createComputed(() => {\n    const content = contents();\n    if (!content) return;\n    batch(() => {\n      if (content.length === 0) setEnd(true);\n      setItems((p) => [...p, ...content]);\n    });\n  });\n\n  return [\n    items,\n    {\n      page,\n      setPage,\n      setItems,\n      end,\n      setEnd,\n    },\n  ];\n}\n","import {\n  IntrinsicNodeStyleProps,\n  IntrinsicTextNodeStyleProps,\n  hexColor,\n} from \"@lightningtv/solid\";\nimport theme from \"theme\";\n\nconst ROW_HEIGHT = 50;\nexport default {\n  ProductRow: {\n    width: 500,\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: 40,\n    height: ROW_HEIGHT,\n    borderRadius: 16,\n    color: 0xffffff0d,\n    border: { color: 0x008085ff, width: 0 },\n    active: {\n      color: 0x39393cff,\n    },\n    focus: {\n      color: 0xf6f6f9ff,\n      border: { color: 0x008085ff, width: 6 },\n    },\n    transition: {\n      // leave easing blank to use default linear\n      x: { duration: 300 },\n      width: { duration: 300 },\n      alpha: { duration: 300 },\n    },\n  },\n  ProductText: {\n    fontSize: 20,\n    fontWeight: 600,\n    lineHeight: 24,\n    color: \"#f6f6f6\",\n    focus: {\n      color: 0x141417ff,\n    },\n  },\n  itemsContainer: {\n    width: theme.layout.screenW,\n    height: 600,\n    y: 180,\n    x: 180,\n    zIndex: 2,\n  },\n} as const;\n","import {\n  createEffect,\n  on,\n  createSignal,\n  createSelector,\n  Index,\n  onMount,\n} from \"solid-js\";\nimport { type ElementNode, View, Text } from \"@lightningtv/solid\";\nimport { Column, Row } from \"@lightningtv/solid-ui\";\nimport styles from \"./gridStyles\";\nimport { setGlobalBackground } from \"../state\";\nimport { createInfiniteItems } from \"@lightningtv/solid/primitives\";\n\ninterface ProductsResponse {\n  limit: number;\n  products: any[]; // You can replace 'any' with the actual type of your products\n  skip: number;\n  total: number;\n}\n\ninterface Product {\n  brand: string;\n  category: string;\n  description: string;\n  discountPercentage: number;\n  id: number;\n  images: string[];\n  price: number;\n  rating: number;\n  stock: number;\n  thumbnail: string;\n  title: string;\n}\n\nfunction ProductRow(props) {\n  return (\n    <View\n      y={props.y}\n      autofocus={props.autofocus}\n      style={styles.ProductRow}\n      forwardStates\n    >\n      <Text style={styles.ProductText}>{props.item.id}</Text>\n      <Text style={styles.ProductText}>{props.item.title}</Text>\n      <Text style={styles.ProductText}>{props.item.price}</Text>\n    </View>\n  );\n}\n\nconst Grid = () => {\n  let totalProducts = 100;\n  const [columnY, setcolumnY] = createSignal(0);\n  const isFirst = createSelector(() => 0);\n  const [rowIndex, setRowIndex] = createSignal(0);\n  const [items, setItems] = createSignal<Product[]>([]);\n  const [products, { setPage }] = createInfiniteItems<Product>((page) => {\n    return fetch(`https://dummyjson.com/products?limit=20&skip=${20 * page}`)\n      .then((res) => res.json())\n      .then((data: ProductsResponse) => {\n        totalProducts = data.total;\n        return data.products;\n      });\n  });\n\n  const EXTRA = 8;\n  // When rowIndex changes we create a sub array for the UI\n  createEffect(\n    on(\n      [products, rowIndex],\n      ([products, index]) => {\n        if (items().length - EXTRA > index) return;\n\n        setItems(products.slice(0, index + EXTRA));\n        if (index > products.length - 5) {\n          // Load more products\n          setPage((p) => p + 1);\n        }\n      },\n      { defer: true }\n    )\n  );\n\n  onMount(() => {\n    setGlobalBackground(\"#000000\");\n  });\n\n  function changeRow(elm, active, selectedIndex, lastSelectedIndex) {\n    setcolumnY((active.y || 0) * -1 + 50);\n    setRowIndex(selectedIndex);\n  }\n\n  return (\n    <View clipping style={styles.itemsContainer}>\n      <Column plinko y={columnY()} scroll=\"none\" onSelectedChanged={changeRow}>\n        <Index each={items()}>\n          {(item, i) => (\n            <ProductRow y={i * 50} item={item()} autofocus={isFirst(i)} />\n          )}\n        </Index>\n      </Column>\n    </View>\n  );\n};\n\nexport default Grid;\n"],"names":["ProductRow","props","_$createComponent","View","y","autofocus","style","styles","forwardStates","children","Text","ProductText","item","id","title","price","Grid","columnY","setcolumnY","createSignal","isFirst","createSelector","rowIndex","setRowIndex","items","setItems","products","setPage","createInfiniteItems","page","fetch","then","res","json","data","total","EXTRA","on","index","length","slice","p","defer","onMount","setGlobalBackground","changeRow","elm","active","selectedIndex","lastSelectedIndex","clipping","itemsContainer","Column","plinko","scroll","onSelectedChanged","Index","each","i"],"mappings":"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","x_google_ignoreList":[0]}