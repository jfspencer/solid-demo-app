{"version":3,"file":"CoreExtension-legacy-1r1p_2oI.js","sources":["../../../../../renderer/dist/src/utils.js","../../../../../renderer/dist/src/core/lib/utils.js","../../../../../renderer/dist/src/common/EventEmitter.js","../../../../../renderer/dist/src/core/renderers/CoreShader.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/ShaderUtils.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreShader.js","../../../../../renderer/dist/src/core/textures/Texture.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/TrFontFace.js","../../../../../renderer/dist/src/core/renderers/CoreContextTexture.js","../../../../../renderer/dist/src/core/renderers/CoreRenderer.js","../../../../../renderer/dist/src/core/renderers/CoreRenderOp.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreRenderOp.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/RendererUtils.js","../../../../../renderer/node_modules/.pnpm/memize@2.1.0/node_modules/memize/dist/index.js","../../../../../renderer/dist/src/core/utils.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxTexture.js","../../../../../renderer/dist/src/core/textures/ColorTexture.js","../../../../../renderer/dist/src/core/textures/SubTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxSubTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/BufferCollection.js","../../../../../renderer/dist/src/core/lib/WebGlContextWrapper.js","../../../../../renderer/dist/src/core/renderers/webgl/internal/WebGlUtils.js","../../../../../renderer/dist/src/core/textures/RenderTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreCtxRenderTexture.js","../../../../../renderer/dist/src/core/renderers/webgl/WebGlCoreRenderer.js","../../../../../renderer/dist/src/core/text-rendering/renderers/SdfTextRenderer/internal/SpecialCodepoints.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/FontShaper.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/SdfFontShaper.js","../../../../../renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/SdfTrFontFace.js","../../../../../renderer/dist/src/core/CoreExtension.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function createWebGLContext(canvas, contextSpy) {\n    const config = {\n        alpha: true,\n        antialias: false,\n        depth: false,\n        stencil: true,\n        desynchronized: false,\n        // Disabled because it prevents Visual Regression Tests from working\n        // failIfMajorPerformanceCaveat: true,\n        powerPreference: 'high-performance',\n        premultipliedAlpha: true,\n        preserveDrawingBuffer: false,\n    };\n    const gl = \n    // TODO: Remove this assertion once this issue is fixed in TypeScript\n    // https://github.com/microsoft/TypeScript/issues/53614\n    (canvas.getContext('webgl', config) ||\n        canvas.getContext('experimental-webgl', config));\n    if (!gl) {\n        throw new Error('Unable to create WebGL context');\n    }\n    if (contextSpy) {\n        // Proxy the GL context to log all GL calls\n        return new Proxy(gl, {\n            get(target, prop) {\n                const value = target[prop];\n                if (typeof value === 'function') {\n                    contextSpy.increment(String(prop));\n                    return value.bind(target);\n                }\n                return value;\n            },\n        });\n    }\n    return gl;\n}\n/**\n * Asserts a condition is truthy, otherwise throws an error\n *\n * @remarks\n * Useful at the top of functions to ensure certain conditions, arguments and\n * properties are set/met before continuing. When using this function,\n * TypeScript will narrow away falsy types from the condition.\n *\n * @param condition\n * @param message\n * @returns\n */\nexport function assertTruthy(condition, message) {\n    if (isProductionEnvironment())\n        return;\n    if (!condition) {\n        throw new Error(message || 'Assertion failed');\n    }\n}\n/**\n * Merges two colors based on a given progress value.\n *\n * This function takes two colors (c1 and c2) represented as 32-bit integers\n * in RGBA format and blends them based on the provided progress value (p).\n * The result is a new color that is a weighted combination of the input colors,\n * where the weight is determined by the progress value.\n *\n * @param {number} c1 - The first color in RGBA format (32-bit integer).\n * @param {number} c2 - The second color in RGBA format (32-bit integer).\n * @param {number} p - The progress value between 0 and 1.\n * @returns {number} The merged color as a 32-bit integer in RGBA format.\n */\nexport function mergeColorProgress(rgba1, rgba2, p) {\n    const r1 = Math.trunc(rgba1 >>> 24);\n    const g1 = Math.trunc((rgba1 >>> 16) & 0xff);\n    const b1 = Math.trunc((rgba1 >>> 8) & 0xff);\n    const a1 = Math.trunc(rgba1 & 0xff);\n    const r2 = Math.trunc(rgba2 >>> 24);\n    const g2 = Math.trunc((rgba2 >>> 16) & 0xff);\n    const b2 = Math.trunc((rgba2 >>> 8) & 0xff);\n    const a2 = Math.trunc(rgba2 & 0xff);\n    const r = Math.round(r2 * p + r1 * (1 - p));\n    const g = Math.round(g2 * p + g1 * (1 - p));\n    const b = Math.round(b2 * p + b1 * (1 - p));\n    const a = Math.round(a2 * p + a1 * (1 - p));\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * @internalRemarks\n * This method does NOT premultiply the alpha into the color channels. If that\n * is required (for internal use only) use {@link mergeColorAlphaPremultiplied}\n * instead.\n *\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @returns\n */\nexport function mergeColorAlpha(rgba, alpha) {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = Math.trunc((rgba & 0xff) * alpha);\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter. Before returning, the\n * final alpha value is multiplied into the color channels.\n *\n * @remarks\n * If `flipEndianess` is set to true, the function will returned an ABGR encoded number\n * which is useful when the color value needs to be passed into a shader attribute.\n *\n * NOTE: This method returns a PREMULTIPLIED alpha color which is generally only useful\n * in the context of the internal rendering process. Use {@link mergeColorAlpha} if you\n * need to blend an alpha value into a color in the context of the Renderer's\n * main API.\n *\n * @internalRemarks\n * Do not expose this method in the main API because Renderer users should instead use\n * {@link mergeColorAlpha} to manipulate the alpha value of a color.\n *\n * @internal\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @param flipEndianess Flip the endianess. RGBA becomes encoded as ABGR (for inserting colors into shader attributes)\n * @returns\n */\nexport function mergeColorAlphaPremultiplied(rgba, alpha, flipEndianess = false) {\n    const newAlpha = ((rgba & 0xff) / 255) * alpha;\n    const r = Math.trunc((rgba >>> 24) * newAlpha);\n    const g = Math.trunc(((rgba >>> 16) & 0xff) * newAlpha);\n    const b = Math.trunc(((rgba >>> 8) & 0xff) * newAlpha);\n    const a = Math.trunc(newAlpha * 255);\n    if (flipEndianess) {\n        return ((a << 24) | (b << 16) | (g << 8) | r) >>> 0;\n    }\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Returns true if the given object has the given \"own\" property.\n *\n * @param obj\n * @param prop\n * @returns\n */\nexport function hasOwn(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n/**\n * Converts degrees to radians\n *\n * @param degrees\n * @returns\n */\nexport function deg2Rad(degrees) {\n    return (degrees * Math.PI) / 180;\n}\n/**\n * Returns image aspect ratio\n *\n * @param width\n * @param height\n * @returns\n */\nexport function getImageAspectRatio(width, height) {\n    return width / height;\n}\n/**\n * Checks import.meta if env is production\n *\n * @returns\n */\nexport function isProductionEnvironment() {\n    return import.meta.env && import.meta.env.PROD;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const getNormalizedRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r / 255, g / 255, b / 255, a / 255];\n};\nexport const getRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r, g, b, a];\n};\nexport const norm = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    const rgbaArr = [r / 255, g / 255, b / 255, a / 255];\n    rgbaArr[0] = Math.max(0, Math.min(255, rgbaArr[0]));\n    rgbaArr[1] = Math.max(0, Math.min(255, rgbaArr[1]));\n    rgbaArr[2] = Math.max(0, Math.min(255, rgbaArr[2]));\n    rgbaArr[3] = Math.max(0, Math.min(255, rgbaArr[3]));\n    let v = ((rgbaArr[3] | 0) << 24) +\n        ((rgbaArr[0] | 0) << 16) +\n        ((rgbaArr[1] | 0) << 8) +\n        (rgbaArr[2] | 0);\n    if (v < 0) {\n        v = 0xffffffff + v + 1;\n    }\n    return v;\n};\nexport function getNormalizedAlphaComponent(rgba) {\n    return (rgba & 0xff) / 255.0;\n}\n/**\n * Get a CSS color string from a RGBA color\n *\n * @param color\n * @returns\n */\nexport function getRgbaString(color) {\n    const r = Math.floor(color[0] * 255.0);\n    const g = Math.floor(color[1] * 255.0);\n    const b = Math.floor(color[2] * 255.0);\n    const a = Math.floor(color[3] * 255.0);\n    return `rgba(${r},${g},${b},${a.toFixed(4)})`;\n}\nexport function createBound(x1, y1, x2, y2, out) {\n    if (out) {\n        out.x1 = x1;\n        out.y1 = y1;\n        out.x2 = x2;\n        out.y2 = y2;\n        return out;\n    }\n    return {\n        x1,\n        y1,\n        x2,\n        y2,\n    };\n}\nexport function intersectBound(a, b, out) {\n    const intersection = createBound(Math.max(a.x1, b.x1), Math.max(a.y1, b.y1), Math.min(a.x2, b.x2), Math.min(a.y2, b.y2), out);\n    if (intersection.x1 < intersection.x2 && intersection.y1 < intersection.y2) {\n        return intersection;\n    }\n    return createBound(0, 0, 0, 0, intersection);\n}\nexport function boundsOverlap(a, b) {\n    return a.x1 < b.x2 && a.x2 > b.x1 && a.y1 < b.y2 && a.y2 > b.y1;\n}\nexport function convertBoundToRect(bound, out) {\n    if (out) {\n        out.x = bound.x1;\n        out.y = bound.y1;\n        out.width = bound.x2 - bound.x1;\n        out.height = bound.y2 - bound.y1;\n        return out;\n    }\n    return {\n        x: bound.x1,\n        y: bound.y1,\n        width: bound.x2 - bound.x1,\n        height: bound.y2 - bound.y1,\n    };\n}\nexport function intersectRect(a, b, out) {\n    const x = Math.max(a.x, b.x);\n    const y = Math.max(a.y, b.y);\n    const width = Math.min(a.x + a.width, b.x + b.width) - x;\n    const height = Math.min(a.y + a.height, b.y + b.height) - y;\n    if (width > 0 && height > 0) {\n        if (out) {\n            out.x = x;\n            out.y = y;\n            out.width = width;\n            out.height = height;\n            return out;\n        }\n        return {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n    if (out) {\n        out.x = 0;\n        out.y = 0;\n        out.width = 0;\n        out.height = 0;\n        return out;\n    }\n    return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n}\nexport function copyRect(a, out) {\n    if (out) {\n        out.x = a.x;\n        out.y = a.y;\n        out.width = a.width;\n        out.height = a.height;\n        return out;\n    }\n    return {\n        x: a.x,\n        y: a.y,\n        width: a.width,\n        height: a.height,\n    };\n}\nexport function compareRect(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null) {\n        return false;\n    }\n    return (a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height);\n}\nexport function boundInsideBound(bound1, bound2) {\n    return (bound1.x1 <= bound2.x2 &&\n        bound1.y1 <= bound2.y2 &&\n        bound1.x2 >= bound2.x1 &&\n        bound1.y2 >= bound2.y1);\n}\nexport function isBoundPositive(bound) {\n    return bound.x1 < bound.x2 && bound.y1 < bound.y2;\n}\nexport function isRectPositive(rect) {\n    return rect.width > 0 && rect.height > 0;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * EventEmitter base class\n */\nexport class EventEmitter {\n    eventListeners = {};\n    on(event, listener) {\n        let listeners = this.eventListeners[event];\n        if (!listeners) {\n            listeners = [];\n        }\n        listeners.push(listener);\n        this.eventListeners[event] = listeners;\n    }\n    off(event, listener) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        if (!listener) {\n            delete this.eventListeners[event];\n            return;\n        }\n        const index = listeners.indexOf(listener);\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n    once(event, listener) {\n        const onceListener = (target, data) => {\n            this.off(event, onceListener);\n            listener(target, data);\n        };\n        this.on(event, onceListener);\n    }\n    emit(event, data) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        [...listeners].forEach((listener) => {\n            listener(this, data);\n        });\n    }\n    removeAllListeners() {\n        this.eventListeners = {};\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreShader {\n    // abstract draw(): void;\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {};\n    }\n}\n//# sourceMappingURL=CoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//#endregion Types\nexport function createShader(glw, type, source) {\n    const shader = glw.createShader(type);\n    if (!shader) {\n        throw new Error();\n    }\n    glw.shaderSource(shader, source);\n    glw.compileShader(shader);\n    const success = glw.getShaderParameter(shader, glw.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(glw.getShaderInfoLog(shader));\n    glw.deleteShader(shader);\n}\nexport function createProgram(glw, vertexShader, fragmentShader) {\n    const program = glw.createProgram();\n    if (!program) {\n        throw new Error();\n    }\n    glw.attachShader(program, vertexShader);\n    glw.attachShader(program, fragmentShader);\n    glw.linkProgram(program);\n    const success = glw.getProgramParameter(program, glw.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(glw.getProgramInfoLog(program));\n    glw.deleteProgram(program);\n    return undefined;\n}\n//# sourceMappingURL=ShaderUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, hasOwn } from '../../../utils.js';\nimport { CoreShader } from '../CoreShader.js';\nimport { createProgram, createShader, } from './internal/ShaderUtils.js';\nimport { isWebGl2 } from './internal/WebGlUtils.js';\nexport class WebGlCoreShader extends CoreShader {\n    boundBufferCollection = null;\n    buffersBound = false;\n    program;\n    /**\n     * Vertex Array Object\n     *\n     * @remarks\n     * Used by WebGL2 Only\n     */\n    vao;\n    renderer;\n    glw;\n    attributeBuffers;\n    attributeLocations;\n    attributeNames;\n    uniformLocations;\n    uniformTypes;\n    supportsIndexedTextures;\n    constructor(options) {\n        super();\n        const renderer = (this.renderer = options.renderer);\n        const glw = (this.glw = this.renderer.glw);\n        this.supportsIndexedTextures = options.supportsIndexedTextures || false;\n        // Check that extensions are supported\n        const webGl2 = glw.isWebGl2();\n        const requiredExtensions = (webGl2 && options.webgl2Extensions) ||\n            (!webGl2 && options.webgl1Extensions) ||\n            [];\n        const glVersion = webGl2 ? '2.0' : '1.0';\n        requiredExtensions.forEach((extensionName) => {\n            if (!glw.getExtension(extensionName)) {\n                throw new Error(`Shader \"${this.constructor.name}\" requires extension \"${extensionName}\" for WebGL ${glVersion} but wasn't found`);\n            }\n        });\n        // Gather shader sources\n        // - If WebGL 2 and special WebGL 2 sources are provided, we copy those sources and delete\n        // the extra copy of them to save memory.\n        // TODO: This could be further made optimal by just caching the compiled shaders and completely deleting\n        // the source code\n        const shaderSources = options.shaderSources ||\n            this.constructor.shaderSources;\n        if (!shaderSources) {\n            throw new Error(`Shader \"${this.constructor.name}\" is missing shaderSources.`);\n        }\n        else if (webGl2 && shaderSources?.webGl2) {\n            shaderSources.fragment = shaderSources.webGl2.fragment;\n            shaderSources.vertex = shaderSources.webGl2.vertex;\n            delete shaderSources.webGl2;\n        }\n        const textureUnits = renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        const vertexSource = shaderSources.vertex instanceof Function\n            ? shaderSources.vertex(textureUnits)\n            : shaderSources.vertex;\n        const fragmentSource = shaderSources.fragment instanceof Function\n            ? shaderSources.fragment(textureUnits)\n            : shaderSources.fragment;\n        const vertexShader = createShader(glw, glw.VERTEX_SHADER, vertexSource);\n        const fragmentShader = createShader(glw, glw.FRAGMENT_SHADER, fragmentSource);\n        if (!vertexShader || !fragmentShader) {\n            throw new Error();\n        }\n        const program = createProgram(glw, vertexShader, fragmentShader);\n        if (!program) {\n            throw new Error();\n        }\n        this.program = program;\n        if (webGl2) {\n            const vao = glw.createVertexArray();\n            if (!vao) {\n                throw new Error();\n            }\n            this.vao = vao;\n            glw.bindVertexArray(this.vao);\n        }\n        this.attributeLocations = {};\n        this.attributeBuffers = {};\n        this.attributeNames = [];\n        [...options.attributes].forEach((attributeName) => {\n            const location = glw.getAttribLocation(this.program, attributeName);\n            if (location < 0) {\n                throw new Error(`${this.constructor.name}: Vertex shader must have an attribute \"${attributeName}\"!`);\n            }\n            const buffer = glw.createBuffer();\n            if (!buffer) {\n                throw new Error(`${this.constructor.name}: Could not create buffer for attribute \"${attributeName}\"`);\n            }\n            this.attributeLocations[attributeName] = location;\n            this.attributeBuffers[attributeName] = buffer;\n            this.attributeNames.push(attributeName);\n        });\n        this.uniformLocations = {};\n        this.uniformTypes = {};\n        options.uniforms.forEach((uniform) => {\n            const location = glw.getUniformLocation(this.program, uniform.name);\n            this.uniformTypes[uniform.name] = uniform.uniform;\n            if (!location) {\n                console.warn(`Shader \"${this.constructor.name}\" could not get uniform location for \"${uniform.name}\"`);\n                return;\n            }\n            this.uniformLocations[uniform.name] = location;\n        });\n    }\n    bindBufferAttribute(location, buffer, attribute) {\n        const { glw } = this;\n        glw.enableVertexAttribArray(location);\n        glw.vertexAttribPointer(buffer, location, attribute.size, attribute.type, attribute.normalized, attribute.stride, attribute.offset);\n    }\n    disableAttribute(location) {\n        this.glw.disableVertexAttribArray(location);\n    }\n    disableAttributes() {\n        for (const loc in this.attributeLocations) {\n            this.disableAttribute(this.attributeLocations[loc]);\n        }\n        this.boundBufferCollection = null;\n    }\n    /**\n     * Given two sets of Shader props destined for this Shader, determine if they can be batched together\n     * to reduce the number of draw calls.\n     *\n     * @remarks\n     * This is used by the {@link WebGlCoreRenderer} to determine if it can batch multiple consecutive draw\n     * calls into a single draw call.\n     *\n     * By default, this returns false (meaning no batching is allowed), but can be\n     * overridden by child classes to provide more efficient batching.\n     *\n     * @param propsA\n     * @param propsB\n     * @returns\n     */\n    canBatchShaderProps(propsA, propsB) {\n        return false;\n    }\n    bindRenderOp(renderOp, props) {\n        this.bindBufferCollection(renderOp.buffers);\n        if (renderOp.textures.length > 0) {\n            this.bindTextures(renderOp.textures);\n        }\n        const { glw, parentHasRenderTexture, renderToTexture } = renderOp;\n        // Skip if the parent and current operation both have render textures\n        if (renderToTexture && parentHasRenderTexture) {\n            return;\n        }\n        // Bind render texture framebuffer dimensions as resolution\n        // if the parent has a render texture\n        if (parentHasRenderTexture) {\n            const { width, height } = renderOp.framebufferDimensions || {};\n            // Force pixel ratio to 1.0 for render textures since they are always 1:1\n            // the final render texture will be rendered to the screen with the correct pixel ratio\n            this.setUniform('u_pixelRatio', 1.0);\n            // Set resolution to the framebuffer dimensions\n            this.setUniform('u_resolution', new Float32Array([width ?? 0, height ?? 0]));\n        }\n        else {\n            this.setUniform('u_pixelRatio', renderOp.options.pixelRatio);\n            this.setUniform('u_resolution', new Float32Array([glw.canvas.width, glw.canvas.height]));\n        }\n        if (props) {\n            // Bind optional automatic uniforms\n            // These are only bound if their keys are present in the props.\n            if (hasOwn(props, '$dimensions')) {\n                let dimensions = props.$dimensions;\n                if (!dimensions) {\n                    dimensions = renderOp.dimensions;\n                }\n                this.setUniform('u_dimensions', [dimensions.width, dimensions.height]);\n            }\n            if (hasOwn(props, '$alpha')) {\n                let alpha = props.$alpha;\n                if (!alpha) {\n                    alpha = renderOp.alpha;\n                }\n                this.setUniform('u_alpha', alpha);\n            }\n            this.bindProps(props);\n        }\n    }\n    setUniform(name, ...value) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-argument\n        this.glw.setUniform(this.uniformTypes[name], this.uniformLocations[name], ...value);\n    }\n    bindBufferCollection(buffer) {\n        if (this.boundBufferCollection === buffer) {\n            return;\n        }\n        for (const attributeName in this.attributeLocations) {\n            const resolvedBuffer = buffer.getBuffer(attributeName);\n            const resolvedInfo = buffer.getAttributeInfo(attributeName);\n            assertTruthy(resolvedBuffer, `Buffer for \"${attributeName}\" not found`);\n            assertTruthy(resolvedInfo);\n            this.bindBufferAttribute(this.attributeLocations[attributeName], resolvedBuffer, resolvedInfo);\n        }\n        this.boundBufferCollection = buffer;\n    }\n    bindProps(props) {\n        // Implement in child class\n    }\n    bindTextures(textures) {\n        // no defaults\n    }\n    attach() {\n        this.glw.useProgram(this.program);\n        this.glw.useProgram(this.program);\n        if (this.glw.isWebGl2() && this.vao) {\n            this.glw.bindVertexArray(this.vao);\n        }\n    }\n    detach() {\n        this.disableAttributes();\n    }\n    static shaderSources;\n}\n//# sourceMappingURL=WebGlCoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../common/EventEmitter.js';\n/**\n * Represents a source of texture data for a CoreContextTexture.\n *\n * @remarks\n * Texture sources are used to populate a CoreContextTexture when that texture\n * is loaded. Texture data retrieved by the CoreContextTexture by the\n * `getTextureData` method. It's the responsibility of the concerete `Texture`\n * subclass to implement this method appropriately.\n */\nexport class Texture extends EventEmitter {\n    txManager;\n    /**\n     * The dimensions of the texture\n     *\n     * @remarks\n     * Until the texture data is loaded for the first time the value will be\n     * `null`.\n     */\n    dimensions = null;\n    error = null;\n    state = 'freed';\n    renderableOwners = new Set();\n    constructor(txManager) {\n        super();\n        this.txManager = txManager;\n    }\n    /**\n     * Add/remove an owner to/from the Texture based on its renderability.\n     *\n     * @remarks\n     * Any object can own a texture, be it a CoreNode or even the state object\n     * from a Text Renderer.\n     *\n     * When the reference to the texture that an owner object holds is replaced\n     * or cleared it must call this with `renderable=false` to release the owner\n     * association.\n     *\n     * @param owner\n     * @param renderable\n     */\n    setRenderableOwner(owner, renderable) {\n        if (renderable) {\n            this.renderableOwners.add(owner);\n        }\n        else {\n            this.renderableOwners.delete(owner);\n        }\n    }\n    /**\n     * Returns true if the texture is assigned to any Nodes that are renderable.\n     */\n    get renderable() {\n        return this.renderableOwners.size > 0;\n    }\n    /**\n     * Set the state of the texture\n     *\n     * @remark\n     * Intended for internal-use only but declared public so that it can be set\n     * by it's associated {@link CoreContextTexture}\n     *\n     * @param state\n     * @param args\n     */\n    setState(state, ...args) {\n        if (this.state !== state) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.state = state;\n            if (state === 'loaded') {\n                const loadedArgs = args;\n                this.dimensions = loadedArgs[0];\n            }\n            else if (state === 'failed') {\n                const failedArgs = args;\n                this.error = failedArgs[0];\n            }\n            this.emit(state, ...args);\n        }\n    }\n    /**\n     * Make a cache key for this texture.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide an\n     * appropriate cache key for the texture type including the texture's\n     * properties that uniquely identify a copy of the texture. If the texture\n     * type does not support caching, then this method should return `false`.\n     *\n     * @param props\n     * @returns\n     * A cache key for this texture or `false` if the texture type does not\n     * support caching.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    /**\n     * Resolve the default values for the texture's properties.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide\n     * default values for the texture's optional properties.\n     *\n     * @param props\n     * @returns\n     * The default values for the texture's properties.\n     */\n    static resolveDefaults(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    props) {\n        return {};\n    }\n}\n//# sourceMappingURL=Texture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../../common/EventEmitter.js';\nexport class TrFontFace extends EventEmitter {\n    fontFamily;\n    descriptors;\n    loaded = false;\n    constructor(fontFamily, descriptors) {\n        super();\n        this.fontFamily = fontFamily;\n        this.descriptors = {\n            style: 'normal',\n            weight: 'normal',\n            stretch: 'normal',\n            ...descriptors,\n        };\n    }\n    /**\n     * Convert a TrFontFaceDescriptors to a FontFaceDescriptors which differ slightly\n     *\n     * @param descriptors\n     * @returns\n     */\n    static convertToCssFontFaceDescriptors(descriptors) {\n        return {\n            style: descriptors.style,\n            weight: typeof descriptors.weight === 'number'\n                ? `${descriptors.weight}`\n                : descriptors.weight,\n            stretch: descriptors.stretch,\n            unicodeRange: descriptors.unicodeRange,\n            variant: descriptors.variant,\n            featureSettings: descriptors.featureSettings,\n            display: descriptors.display,\n        };\n    }\n}\n//# sourceMappingURL=TrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreContextTexture {\n    memManager;\n    textureSource;\n    constructor(memManager, textureSource) {\n        this.memManager = memManager;\n        this.textureSource = textureSource;\n    }\n}\n//# sourceMappingURL=CoreContextTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreContextTexture } from './CoreContextTexture.js';\nexport class CoreRenderer {\n    stage;\n    constructor(stage) {\n        this.stage = stage;\n    }\n}\n//# sourceMappingURL=CoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreRenderOp {\n}\n//# sourceMappingURL=CoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreRenderOp } from '../CoreRenderOp.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nconst MAX_TEXTURES = 8; // TODO: get from gl\n/**\n * Can render multiple quads with multiple textures (up to vertex shader texture limit)\n *\n */\nexport class WebGlCoreRenderOp extends CoreRenderOp {\n    glw;\n    options;\n    buffers;\n    shader;\n    shaderProps;\n    alpha;\n    clippingRect;\n    dimensions;\n    bufferIdx;\n    zIndex;\n    renderToTexture;\n    parentHasRenderTexture;\n    framebufferDimensions;\n    length = 0;\n    numQuads = 0;\n    textures = [];\n    maxTextures;\n    constructor(glw, options, buffers, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, zIndex, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        super();\n        this.glw = glw;\n        this.options = options;\n        this.buffers = buffers;\n        this.shader = shader;\n        this.shaderProps = shaderProps;\n        this.alpha = alpha;\n        this.clippingRect = clippingRect;\n        this.dimensions = dimensions;\n        this.bufferIdx = bufferIdx;\n        this.zIndex = zIndex;\n        this.renderToTexture = renderToTexture;\n        this.parentHasRenderTexture = parentHasRenderTexture;\n        this.framebufferDimensions = framebufferDimensions;\n        this.maxTextures = shader.supportsIndexedTextures\n            ? glw.getParameter(glw.MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n            : 1;\n    }\n    addTexture(texture) {\n        const { textures, maxTextures } = this;\n        const existingIdx = textures.findIndex((t) => t === texture);\n        if (existingIdx !== -1) {\n            return existingIdx;\n        }\n        const newIdx = textures.length;\n        if (newIdx >= maxTextures) {\n            return 0xffffffff;\n        }\n        this.textures.push(texture);\n        return newIdx;\n    }\n    draw() {\n        const { glw, shader, shaderProps, options } = this;\n        const { shManager } = options;\n        shManager.useShader(shader);\n        shader.bindRenderOp(this, shaderProps);\n        // TODO: Reduce calculations required\n        const quadIdx = (this.bufferIdx / 24) * 6 * 2;\n        // Clipping\n        if (this.clippingRect.valid) {\n            const { x, y, width, height } = this.clippingRect;\n            const pixelRatio = options.pixelRatio;\n            const canvasHeight = options.canvas.height;\n            const clipX = Math.round(x * pixelRatio);\n            const clipWidth = Math.round(width * pixelRatio);\n            const clipHeight = Math.round(height * pixelRatio);\n            const clipY = Math.round(canvasHeight - clipHeight - y * pixelRatio);\n            glw.setScissorTest(true);\n            glw.scissor(clipX, clipY, clipWidth, clipHeight);\n        }\n        else {\n            glw.setScissorTest(false);\n        }\n        glw.drawElements(glw.TRIANGLES, 6 * this.numQuads, glw.UNSIGNED_SHORT, quadIdx);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Get device specific webgl parameters\n * @param glw\n */\nexport function getWebGlParameters(glw) {\n    const params = {\n        MAX_RENDERBUFFER_SIZE: 0,\n        MAX_TEXTURE_SIZE: 0,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n        MAX_VIEWPORT_DIMS: 0,\n        MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0,\n        MAX_VERTEX_ATTRIBS: 0,\n        MAX_VARYING_VECTORS: 0,\n        MAX_VERTEX_UNIFORM_VECTORS: 0,\n        MAX_FRAGMENT_UNIFORM_VECTORS: 0,\n    };\n    // Map over all parameters and get them\n    const keys = Object.keys(params);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        params[key] = glw.getParameter(glw[key]);\n    });\n    return params;\n}\n/**\n * Get device webgl extensions\n * @param glw\n */\nexport function getWebGlExtensions(glw) {\n    const extensions = {\n        ANGLE_instanced_arrays: null,\n        WEBGL_compressed_texture_s3tc: null,\n        WEBGL_compressed_texture_astc: null,\n        WEBGL_compressed_texture_etc: null,\n        WEBGL_compressed_texture_etc1: null,\n        WEBGL_compressed_texture_pvrtc: null,\n        WEBKIT_WEBGL_compressed_texture_pvrtc: null,\n        WEBGL_compressed_texture_s3tc_srgb: null,\n        OES_vertex_array_object: null,\n    };\n    // Map over all extensions and get them\n    const keys = Object.keys(extensions);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        extensions[key] = glw.getExtension(key);\n    });\n    return extensions;\n}\n/**\n * Allocate big memory chunk that we\n * can re-use to draw quads\n *\n * @param glw\n * @param size\n */\nexport function createIndexBuffer(glw, size) {\n    const maxQuads = ~~(size / 80);\n    const indices = new Uint16Array(maxQuads * 6);\n    for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n        indices[i] = j;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n        indices[i + 3] = j + 2;\n        indices[i + 4] = j + 1;\n        indices[i + 5] = j + 3;\n    }\n    const buffer = glw.createBuffer();\n    glw.elementArrayBufferData(buffer, indices, glw.STATIC_DRAW);\n}\n/**\n * Checks if an object is of type HTMLImageElement.\n * This is used because we cant check for HTMLImageElement directly when the\n * renderer is running in a seperate web worker context.\n *\n * @param obj\n * @returns\n */\nexport function isHTMLImageElement(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        obj.constructor &&\n        obj.constructor.name === 'HTMLImageElement');\n}\n//# sourceMappingURL=RendererUtils.js.map","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {(...args: any[]) => any} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {((...args: Parameters<F>) => ReturnType<F>) & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize(fn, options) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized(/* ...args */) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs,\n\t\t\ti;\n\n\t\tsearchCache: while (node) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif (node.args.length !== arguments.length) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (node.args[i] !== arguments[i]) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== head) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif (node === tail) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ (head).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply(null, args),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (head) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif (size === /** @type {MemizeOptions} */ (options).maxSize) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ (tail).prev;\n\t\t\t/** @type {MemizeCacheNode} */ (tail).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function () {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nexport { memize as default };\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Core Utility Functions\n *\n * @module\n */\nimport memo from 'memize';\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\nconst degree = Math.PI / 180;\nexport const setMatrixArrayType = (type) => {\n    ARRAY_TYPE = type;\n};\nexport const toRadian = (a) => {\n    return a * degree;\n};\nexport const equals = (a, b) => {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n};\nexport const rand = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nexport const isPowerOfTwo = (value) => {\n    return value && !(value & (value - 1));\n};\nconst getTimingBezier = (a, b, c, d) => {\n    const xc = 3.0 * a;\n    const xb = 3.0 * (c - a) - xc;\n    const xa = 1.0 - xc - xb;\n    const yc = 3.0 * b;\n    const yb = 3.0 * (d - b) - yc;\n    const ya = 1.0 - yc - yb;\n    return function (time) {\n        if (time >= 1.0) {\n            return 1;\n        }\n        if (time <= 0) {\n            return 0;\n        }\n        let t = 0.5, cbx, cbxd, dx;\n        for (let it = 0; it < 20; it++) {\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                return t * (t * (t * ya + yb) + yc);\n            }\n            // Cubic bezier derivative.\n            cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n            t += dx / cbxd;\n        }\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc);\n            }\n            if (dx < 0) {\n                maxT = t;\n            }\n            else {\n                minT = t;\n            }\n        }\n    };\n};\nexport const getTimingFunction = memo((str) => {\n    switch (str) {\n        case 'linear':\n            return function (time) {\n                return time;\n            };\n        case 'ease':\n            return getTimingBezier(0.25, 0.1, 0.25, 1.0);\n        case 'ease-in':\n            return getTimingBezier(0.42, 0, 1.0, 1.0);\n        case 'ease-out':\n            return getTimingBezier(0, 0, 0.58, 1.0);\n        case 'ease-in-out':\n            return getTimingBezier(0.42, 0, 0.58, 1.0);\n        case 'ease-in-sine':\n            return getTimingBezier(0.12, 0, 0.39, 0);\n        case 'ease-out-sine':\n            return getTimingBezier(0.12, 0, 0.39, 0);\n        case 'ease-in-out-sine':\n            return getTimingBezier(0.37, 0, 0.63, 1);\n        case 'ease-in-cubic':\n            return getTimingBezier(0.32, 0, 0.67, 0);\n        case 'ease-out-cubic':\n            return getTimingBezier(0.33, 1, 0.68, 1);\n        case 'ease-in-out-cubic':\n            return getTimingBezier(0.65, 0, 0.35, 1);\n        case 'ease-in-circ':\n            return getTimingBezier(0.55, 0, 1, 0.45);\n        case 'ease-out-circ':\n            return getTimingBezier(0, 0.55, 0.45, 1);\n        case 'ease-in-out-circ':\n            return getTimingBezier(0.85, 0, 0.15, 1);\n        case 'ease-in-back':\n            return getTimingBezier(0.36, 0, 0.66, -0.56);\n        case 'ease-out-back':\n            return getTimingBezier(0.34, 1.56, 0.64, 1);\n        case 'ease-in-out-back':\n            return getTimingBezier(0.68, -0.6, 0.32, 1.6);\n        case 'step-start':\n            return function () {\n                return 1;\n            };\n        case 'step-end':\n            return function (time) {\n                return time === 1 ? 1 : 0;\n            };\n        default:\n            // eslint-disable-next-line no-case-declarations\n            const s = 'cubic-bezier(';\n            if (str && str.indexOf(s) === 0) {\n                const parts = str\n                    .substr(s.length, str.length - s.length - 1)\n                    .split(',');\n                if (parts.length !== 4) {\n                    console.warn('Unknown timing function: ' + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time;\n                    };\n                }\n                const a = parseFloat(parts[0] || '0.42');\n                const b = parseFloat(parts[1] || '0');\n                const c = parseFloat(parts[2] || '1');\n                const d = parseFloat(parts[3] || '1');\n                if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                    console.warn(' Unknown timing function: ' + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time;\n                    };\n                }\n                return getTimingBezier(a, b, c, d);\n            }\n            else {\n                console.warn('Unknown timing function: ' + str);\n                // Fallback: use linear.\n                return function (time) {\n                    return time;\n                };\n            }\n    }\n});\nif (!Math.hypot)\n    Math.hypot = (...args) => {\n        let y = 0, i = args.length;\n        while (i--) {\n            y += args[i] * args[i];\n        }\n        return Math.sqrt(y);\n    };\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { isPowerOfTwo } from '../../utils.js';\nimport { CoreContextTexture } from '../CoreContextTexture.js';\nimport { isHTMLImageElement } from './internal/RendererUtils.js';\nconst TRANSPARENT_TEXTURE_DATA = new Uint8Array([0, 0, 0, 0]);\n/**\n * A wrapper around a WebGLTexture that handles loading the texture data\n * from a Texture source and uploading it to the GPU as well as freeing\n * the uploaded texture.\n *\n * @remarks\n * When accessing the ctxTexture property, the texture will be loaded if\n * it hasn't been already. ctxTexture will always return a valid WebGLTexture\n * and trigger the loading/uploading of the texture's data if it hasn't been\n * loaded yet.\n */\nexport class WebGlCoreCtxTexture extends CoreContextTexture {\n    glw;\n    _nativeCtxTexture = null;\n    _state = 'freed';\n    _w = 0;\n    _h = 0;\n    constructor(glw, memManager, textureSource) {\n        super(memManager, textureSource);\n        this.glw = glw;\n    }\n    get ctxTexture() {\n        if (this._state === 'freed') {\n            this.load();\n        }\n        assertTruthy(this._nativeCtxTexture);\n        return this._nativeCtxTexture;\n    }\n    get renderable() {\n        return this.textureSource.renderable;\n    }\n    get w() {\n        return this._w;\n    }\n    get h() {\n        return this._h;\n    }\n    /**\n     * Load the texture data from the Texture source and upload it to the GPU\n     *\n     * @remarks\n     * This method is called automatically when accessing the ctxTexture property\n     * if the texture hasn't been loaded yet. But it can also be called manually\n     * to force the texture to be pre-loaded prior to accessing the ctxTexture\n     * property.\n     */\n    load() {\n        // If the texture is already loading or loaded, don't load it again.\n        if (this._state === 'loading' || this._state === 'loaded') {\n            return;\n        }\n        this._state = 'loading';\n        this.textureSource.setState('loading');\n        this._nativeCtxTexture = this.createNativeCtxTexture();\n        this.onLoadRequest()\n            .then(({ width, height }) => {\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'loaded';\n            this._w = width;\n            this._h = height;\n            // Update the texture source's width and height so that it can be used\n            // for rendering.\n            this.textureSource.setState('loaded', { width, height });\n        })\n            .catch((err) => {\n            this._state = 'failed';\n            this.textureSource.setState('failed', err);\n            console.error(err);\n        });\n    }\n    /**\n     * Called when the texture data needs to be loaded and uploaded to a texture\n     */\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        // Set to a 1x1 transparent texture\n        glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        const textureData = await this.textureSource?.getTextureData();\n        // If the texture has been freed while loading, return early.\n        if (!this._nativeCtxTexture) {\n            assertTruthy(this._state === 'freed');\n            return { width: 0, height: 0 };\n        }\n        let width = 0;\n        let height = 0;\n        assertTruthy(this._nativeCtxTexture);\n        glw.activeTexture(0);\n        // If textureData is null, the texture is empty (0, 0) and we don't need to\n        // upload any data to the GPU.\n        if (textureData.data instanceof ImageBitmap ||\n            textureData.data instanceof ImageData ||\n            // not using typeof HTMLImageElement due to web worker\n            isHTMLImageElement(textureData.data)) {\n            const data = textureData.data;\n            width = data.width;\n            height = data.height;\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.pixelStorei(glw.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !!textureData.premultiplyAlpha);\n            glw.texImage2D(0, glw.RGBA, glw.RGBA, glw.UNSIGNED_BYTE, data);\n            memManager.setTextureMemUse(this, width * height * 4);\n            // generate mipmaps for power-of-2 textures or in WebGL2RenderingContext\n            if (glw.isWebGl2() || (isPowerOfTwo(width) && isPowerOfTwo(height))) {\n                glw.generateMipmap();\n            }\n        }\n        else if (textureData.data === null) {\n            width = 0;\n            height = 0;\n            // Reset to a 1x1 transparent texture\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, TRANSPARENT_TEXTURE_DATA);\n            memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        }\n        else if ('mipmaps' in textureData.data && textureData.data.mipmaps) {\n            const { mipmaps, width = 0, height = 0, type, glInternalFormat, } = textureData.data;\n            const view = type === 'ktx'\n                ? new DataView(mipmaps[0] ?? new ArrayBuffer(0))\n                : mipmaps[0];\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.compressedTexImage2D(0, glInternalFormat, width, height, 0, view);\n            glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n            glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n            memManager.setTextureMemUse(this, view.byteLength);\n        }\n        else {\n            console.error(`WebGlCoreCtxTexture.onLoadRequest: Unexpected textureData returned`, textureData);\n        }\n        return {\n            width,\n            height,\n        };\n    }\n    /**\n     * Free the WebGLTexture from the GPU\n     *\n     * @returns\n     */\n    free() {\n        if (this._state === 'freed') {\n            return;\n        }\n        this._state = 'freed';\n        this.textureSource.setState('freed');\n        this._w = 0;\n        this._h = 0;\n        if (!this._nativeCtxTexture) {\n            return;\n        }\n        const { glw, memManager } = this;\n        glw.deleteTexture(this._nativeCtxTexture);\n        memManager.setTextureMemUse(this, 0);\n        this._nativeCtxTexture = null;\n    }\n    /**\n     * Create native context texture\n     *\n     * @remarks\n     * When this method returns the returned texture will be bound to the GL context state.\n     *\n     * @param width\n     * @param height\n     * @returns\n     */\n    createNativeCtxTexture() {\n        const { glw } = this;\n        const nativeTexture = glw.createTexture();\n        if (!nativeTexture) {\n            throw new Error('Could not create WebGL Texture');\n        }\n        // On initial load request, create a 1x1 transparent texture to use until\n        // the texture data is finally loaded.\n        glw.activeTexture(0);\n        glw.bindTexture(nativeTexture);\n        // linear texture filtering\n        glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n        glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n        // texture wrapping method\n        glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n        glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n        return nativeTexture;\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\n/**\n * Texture consisting of only a 1x1 color pixel\n *\n * @remarks\n * The pixel color is set with the {@link ColorTextureProps.color} prop.\n *\n * This is the default texture used for a Node if it's\n * {@link INodeWritableProps.texture} prop is set to `null` (the default)\n *\n * Generally the 1x1 color pixel is stretched to whatever the set dimensions of\n * a Node are.\n */\nexport class ColorTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = ColorTexture.resolveDefaults(props || {});\n    }\n    get color() {\n        return this.props.color;\n    }\n    set color(color) {\n        this.props.color = color;\n    }\n    async getTextureData() {\n        const pixelData32 = new Uint32Array([this.color]);\n        const pixelData8 = new Uint8ClampedArray(pixelData32.buffer);\n        return {\n            data: new ImageData(pixelData8, 1, 1),\n            premultiplyAlpha: true,\n        };\n    }\n    static makeCacheKey(props) {\n        const resolvedProps = ColorTexture.resolveDefaults(props);\n        return `ColorTexture,${resolvedProps.color}`;\n    }\n    static resolveDefaults(props) {\n        return {\n            color: props.color || 0xffffffff,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=ColorTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture, } from './Texture.js';\n/**\n * A Texture that is a sub-region of another Texture.\n *\n * @remarks\n * The parent texture can be a Sprite Sheet/Texture Atlas and set using the\n * {@link SubTextureProps.texture} prop. The sub-region relative to the parent\n * texture is defined with the {@link SubTextureProps.x},\n * {@link SubTextureProps.y}, {@link SubTextureProps.width}, and\n * {@link SubTextureProps.height} pixel values.\n */\nexport class SubTexture extends Texture {\n    props;\n    parentTexture;\n    constructor(txManager, props) {\n        super(txManager);\n        this.parentTexture = this.txManager.loadTexture(props.texture.txType, props.texture.props, props.texture.options);\n        this.props = SubTexture.resolveDefaults(props || {});\n        // If parent texture is already loaded / failed, trigger loaded event manually\n        // so that users get a consistent event experience.\n        // We do this in a microtask to allow listeners to be attached in the same\n        // synchronous task after calling loadTexture()\n        queueMicrotask(() => {\n            const parentTx = this.parentTexture;\n            if (parentTx.state === 'loaded') {\n                this.onParentTxLoaded(parentTx, parentTx.dimensions);\n            }\n            else if (parentTx.state === 'failed') {\n                this.onParentTxFailed(parentTx, parentTx.error);\n            }\n            parentTx.on('loaded', this.onParentTxLoaded);\n            parentTx.on('failed', this.onParentTxFailed);\n        });\n    }\n    onParentTxLoaded = () => {\n        // We ignore the parent's passed dimensions, and simply use the SubTexture's\n        // configured dimensions (because that's all that matters here)\n        this.setState('loaded', {\n            width: this.props.width,\n            height: this.props.height,\n        });\n    };\n    onParentTxFailed = (target, error) => {\n        this.setState('failed', error);\n    };\n    async getTextureData() {\n        return {\n            data: this.props,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {\n            texture: props.texture,\n            x: props.x || 0,\n            y: props.y || 0,\n            width: props.width || 0,\n            height: props.height || 0,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=SubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxSubTexture extends WebGlCoreCtxTexture {\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n    }\n    async onLoadRequest() {\n        const props = await this.textureSource.getTextureData();\n        return {\n            width: props.data?.width || 0,\n            height: props.data?.height || 0,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxSubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a collection of WebGL Buffers along with their associated\n * vertex attribute formats.\n */\nexport class BufferCollection {\n    config;\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * Get the WebGLBuffer associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getBuffer(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])?.buffer;\n    }\n    /**\n     * Get the AttributeInfo associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getAttributeInfo(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])\n            ?.attributes[attributeName];\n    }\n}\n//# sourceMappingURL=BufferCollection.js.map","/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport { assertTruthy } from '../../utils.js';\nimport { isWebGl2 } from '../renderers/webgl/internal/WebGlUtils.js';\n/**\n * Optimized WebGL Context Wrapper\n *\n * @remarks\n * This class contains the subset of the WebGLRenderingContext & WebGL2RenderingContext\n * API that is used by the renderer. Select high volume WebGL methods include\n * caching optimizations to avoid making WebGL calls if the state is already set\n * to the desired value.\n *\n * While most methods contained are direct passthroughs to the WebGL context,\n * some methods combine multiple WebGL calls into one for convenience, modify\n * arguments to be more convenient, or are replaced by more specific methods.\n *\n * Not all methods are optimized. Only methods that are called frequently\n * and/or have a high cost are optimized.\n *\n * A subset of GLenum constants are also exposed as properties on this class\n * for convenience.\n */\nexport class WebGlContextWrapper {\n    gl;\n    //#region Cached WebGL State\n    activeTextureUnit = 0;\n    texture2dUnits;\n    texture2dParams = new WeakMap();\n    scissorEnabled;\n    scissorX;\n    scissorY;\n    scissorWidth;\n    scissorHeight;\n    blendEnabled;\n    blendSrcRgb;\n    blendDstRgb;\n    blendSrcAlpha;\n    blendDstAlpha;\n    boundArrayBuffer;\n    boundElementArrayBuffer;\n    curProgram;\n    programUniforms = new WeakMap();\n    //#endregion Cached WebGL State\n    //#region Canvas\n    canvas;\n    //#endregion Canvas\n    //#region WebGL Enums\n    MAX_RENDERBUFFER_SIZE;\n    MAX_TEXTURE_SIZE;\n    MAX_VIEWPORT_DIMS;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n    MAX_TEXTURE_IMAGE_UNITS;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n    MAX_VERTEX_ATTRIBS;\n    MAX_VARYING_VECTORS;\n    MAX_VERTEX_UNIFORM_VECTORS;\n    MAX_FRAGMENT_UNIFORM_VECTORS;\n    TEXTURE_MAG_FILTER;\n    TEXTURE_MIN_FILTER;\n    TEXTURE_WRAP_S;\n    TEXTURE_WRAP_T;\n    LINEAR;\n    CLAMP_TO_EDGE;\n    RGBA;\n    UNSIGNED_BYTE;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n    UNPACK_FLIP_Y_WEBGL;\n    FLOAT;\n    TRIANGLES;\n    UNSIGNED_SHORT;\n    ONE;\n    ONE_MINUS_SRC_ALPHA;\n    VERTEX_SHADER;\n    FRAGMENT_SHADER;\n    STATIC_DRAW;\n    COMPILE_STATUS;\n    LINK_STATUS;\n    DYNAMIC_DRAW;\n    COLOR_ATTACHMENT0;\n    //#endregion WebGL Enums\n    constructor(gl) {\n        this.gl = gl;\n        // The following code extracts the current state of the WebGL context\n        // to our local JavaScript cached version of it. This is so we can\n        // avoid making WebGL calls if we don't need to.\n        // We could assume that the WebGL context is in a default state, but\n        // in the future we may want to support restoring a broken WebGL context\n        // and this will help with that.\n        this.activeTextureUnit =\n            gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n        const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        // save current texture units\n        this.texture2dUnits = new Array(maxTextureUnits)\n            .fill(undefined)\n            .map((_, i) => {\n            this.activeTexture(i);\n            return gl.getParameter(gl.TEXTURE_BINDING_2D);\n        });\n        // restore active texture unit\n        this.activeTexture(this.activeTextureUnit);\n        this.scissorEnabled = gl.isEnabled(gl.SCISSOR_TEST);\n        const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\n        this.scissorX = scissorBox[0];\n        this.scissorY = scissorBox[1];\n        this.scissorWidth = scissorBox[2];\n        this.scissorHeight = scissorBox[3];\n        this.blendEnabled = gl.isEnabled(gl.BLEND);\n        this.blendSrcRgb = gl.getParameter(gl.BLEND_SRC_RGB);\n        this.blendDstRgb = gl.getParameter(gl.BLEND_DST_RGB);\n        this.blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n        this.blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n        this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        this.canvas = gl.canvas;\n        // Extract GLenums\n        this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;\n        this.MAX_TEXTURE_SIZE = gl.MAX_TEXTURE_SIZE;\n        this.MAX_VIEWPORT_DIMS = gl.MAX_VIEWPORT_DIMS;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.MAX_TEXTURE_IMAGE_UNITS = gl.MAX_TEXTURE_IMAGE_UNITS;\n        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n        this.MAX_VERTEX_ATTRIBS = gl.MAX_VERTEX_ATTRIBS;\n        this.MAX_VARYING_VECTORS = gl.MAX_VARYING_VECTORS;\n        this.MAX_VERTEX_UNIFORM_VECTORS = gl.MAX_VERTEX_UNIFORM_VECTORS;\n        this.MAX_FRAGMENT_UNIFORM_VECTORS = gl.MAX_FRAGMENT_UNIFORM_VECTORS;\n        this.TEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;\n        this.TEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;\n        this.TEXTURE_WRAP_S = gl.TEXTURE_WRAP_S;\n        this.TEXTURE_WRAP_T = gl.TEXTURE_WRAP_T;\n        this.LINEAR = gl.LINEAR;\n        this.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;\n        this.RGBA = gl.RGBA;\n        this.UNSIGNED_BYTE = gl.UNSIGNED_BYTE;\n        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n        this.UNPACK_FLIP_Y_WEBGL = gl.UNPACK_FLIP_Y_WEBGL;\n        this.FLOAT = gl.FLOAT;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.ONE = gl.ONE;\n        this.ONE_MINUS_SRC_ALPHA = gl.ONE_MINUS_SRC_ALPHA;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.VERTEX_SHADER = gl.VERTEX_SHADER;\n        this.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n        this.STATIC_DRAW = gl.STATIC_DRAW;\n        this.COMPILE_STATUS = gl.COMPILE_STATUS;\n        this.LINK_STATUS = gl.LINK_STATUS;\n        this.DYNAMIC_DRAW = gl.DYNAMIC_DRAW;\n        this.COLOR_ATTACHMENT0 = gl.COLOR_ATTACHMENT0;\n    }\n    /**\n     * Returns true if the WebGL context is WebGL2\n     *\n     * @returns\n     */\n    isWebGl2() {\n        return isWebGl2(this.gl);\n    }\n    /**\n     * ```\n     * gl.activeTexture(textureUnit + gl.TEXTURE0);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: `textureUnit` is based from 0, not `gl.TEXTURE0`.\n     *\n     * @param textureUnit\n     */\n    activeTexture(textureUnit) {\n        const { gl } = this;\n        if (this.activeTextureUnit !== textureUnit) {\n            gl.activeTexture(textureUnit + gl.TEXTURE0);\n            this.activeTextureUnit = textureUnit;\n        }\n    }\n    /**\n     * ```\n     * gl.bindTexture(gl.TEXTURE_2D, texture);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param texture\n     */\n    bindTexture(texture) {\n        const { gl, activeTextureUnit, texture2dUnits } = this;\n        if (texture2dUnits[activeTextureUnit] === texture) {\n            return;\n        }\n        texture2dUnits[activeTextureUnit] = texture;\n        gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    }\n    _getActiveTexture() {\n        const { activeTextureUnit, texture2dUnits } = this;\n        return texture2dUnits[activeTextureUnit];\n    }\n    /**\n     * ```\n     * gl.texParameteri(gl.TEXTURE_2D, pname, param);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param pname\n     * @param param\n     * @returns\n     */\n    texParameteri(pname, param) {\n        const { gl, texture2dParams } = this;\n        const activeTexture = this._getActiveTexture();\n        if (!activeTexture) {\n            throw new Error('No active texture');\n        }\n        let textureParams = texture2dParams.get(activeTexture);\n        if (!textureParams) {\n            textureParams = {};\n            texture2dParams.set(activeTexture, textureParams);\n        }\n        if (textureParams[pname] === param) {\n            return;\n        }\n        textureParams[pname] = param;\n        gl.texParameteri(gl.TEXTURE_2D, pname, param);\n    }\n    texImage2D(level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels) {\n        const { gl } = this;\n        if (format) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource);\n        }\n    }\n    /**\n     * ```\n     * gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, data);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    compressedTexImage2D(level, internalformat, width, height, border, data) {\n        const { gl } = this;\n        gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalformat, width, height, border, data);\n    }\n    /**\n     * ```\n     * gl.pixelStorei(pname, param);\n     * ```\n     *\n     * @param pname\n     * @param param\n     */\n    pixelStorei(pname, param) {\n        const { gl } = this;\n        gl.pixelStorei(pname, param);\n    }\n    /**\n     * ```\n     * gl.generateMipmap(gl.TEXTURE_2D);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    generateMipmap() {\n        const { gl } = this;\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    /**\n     * ```\n     * gl.createTexture();\n     * ```\n     *\n     * @returns\n     */\n    createTexture() {\n        const { gl } = this;\n        return gl.createTexture();\n    }\n    /**\n     * ```\n     * gl.deleteTexture(texture);\n     * ```\n     *\n     * @param texture\n     */\n    deleteTexture(texture) {\n        const { gl } = this;\n        if (texture) {\n            this.texture2dParams.delete(texture);\n        }\n        gl.deleteTexture(texture);\n    }\n    /**\n     * ```\n     * gl.viewport(x, y, width, height);\n     * ```\n     */\n    viewport(x, y, width, height) {\n        const { gl } = this;\n        gl.viewport(x, y, width, height);\n    }\n    /**\n     * ```\n     * gl.clearColor(red, green, blue, alpha);\n     * ```\n     *\n     * @param red\n     * @param green\n     * @param blue\n     * @param alpha\n     */\n    clearColor(red, green, blue, alpha) {\n        const { gl } = this;\n        gl.clearColor(red, green, blue, alpha);\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.SCISSOR_TEST);\n     * ```\n     * @param enable\n     */\n    setScissorTest(enable) {\n        const { gl, scissorEnabled } = this;\n        if (enable === scissorEnabled) {\n            return;\n        }\n        if (enable) {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n        else {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n        this.scissorEnabled = enable;\n    }\n    /**\n     * ```\n     * gl.scissor(x, y, width, height);\n     * ```\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    scissor(x, y, width, height) {\n        const { gl, scissorX, scissorY, scissorWidth, scissorHeight } = this;\n        if (x !== scissorX ||\n            y !== scissorY ||\n            width !== scissorWidth ||\n            height !== scissorHeight) {\n            gl.scissor(x, y, width, height);\n            this.scissorX = x;\n            this.scissorY = y;\n            this.scissorWidth = width;\n            this.scissorHeight = height;\n        }\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.BLEND);\n     * ```\n     *\n     * @param blend\n     * @returns\n     */\n    setBlend(blend) {\n        const { gl, blendEnabled } = this;\n        if (blend === blendEnabled) {\n            return;\n        }\n        if (blend) {\n            gl.enable(gl.BLEND);\n        }\n        else {\n            gl.disable(gl.BLEND);\n        }\n        this.blendEnabled = blend;\n    }\n    /**\n     * ```\n     * gl.blendFunc(src, dst);\n     * ```\n     *\n     * @param src\n     * @param dst\n     */\n    blendFunc(src, dst) {\n        const { gl, blendSrcRgb, blendDstRgb, blendSrcAlpha, blendDstAlpha } = this;\n        if (src !== blendSrcRgb ||\n            dst !== blendDstRgb ||\n            src !== blendSrcAlpha ||\n            dst !== blendDstAlpha) {\n            gl.blendFunc(src, dst);\n            this.blendSrcRgb = src;\n            this.blendDstRgb = dst;\n            this.blendSrcAlpha = src;\n            this.blendDstAlpha = dst;\n        }\n    }\n    /**\n     * ```\n     * gl.createBuffer();\n     * ```\n     *\n     * @returns\n     */\n    createBuffer() {\n        const { gl } = this;\n        return gl.createBuffer();\n    }\n    /**\n     * ```\n     * gl.createFramebuffer();\n     * ```\n     * @returns\n     */\n    createFramebuffer() {\n        const { gl } = this;\n        return gl.createFramebuffer();\n    }\n    /**\n     * ```\n     * gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n     * ```\n     *\n     * @param framebuffer\n     */\n    bindFramebuffer(framebuffer) {\n        const { gl } = this;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n    /**\n     * ```\n     * gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.FRAMEBUFFER` and textarget is always `gl.TEXTURE_2D`\n     */\n    framebufferTexture2D(attachment, texture, level) {\n        const { gl } = this;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, level);\n    }\n    /**\n     * ```\n     * gl.clear(gl.COLOR_BUFFER_BIT);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Clear mask is always `gl.COLOR_BUFFER_BIT`\n     */\n    clear() {\n        const { gl } = this;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    arrayBufferData(buffer, data, usage) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n     * ```\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    elementArrayBufferData(buffer, data, usage) {\n        const { gl, boundElementArrayBuffer } = this;\n        if (boundElementArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            this.boundElementArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.vertexAttribPointer` are combined into one function.\n     *\n     * @param buffer\n     * @param index\n     * @param size\n     * @param type\n     * @param normalized\n     * @param stride\n     * @param offset\n     */\n    vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n    /**\n     * ```\n     * gl.useProgram(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    useProgram(program) {\n        const { gl, curProgram } = this;\n        if (curProgram === program) {\n            return;\n        }\n        gl.useProgram(program);\n        this.curProgram = program;\n    }\n    setUniform(type, location, ...args) {\n        const { gl, programUniforms } = this;\n        let uniforms = programUniforms.get(this.curProgram);\n        if (!uniforms) {\n            uniforms = new Map();\n            programUniforms.set(this.curProgram, uniforms);\n        }\n        const uniformArgs = uniforms.get(location);\n        if (!uniformArgs || !compareArrays(uniformArgs, args)) {\n            uniforms.set(location, args);\n            gl[type](location, ...args);\n        }\n    }\n    /**\n     * ```\n     * gl.getParameter(pname);\n     * ```\n     *\n     * @param pname\n     * @returns\n     */\n    getParameter(pname) {\n        const { gl } = this;\n        return gl.getParameter(pname);\n    }\n    /**\n     * ```\n     * gl.drawElements(mode, count, type, offset);\n     * ```\n     *\n     * @param mode\n     * @param count\n     * @param type\n     * @param offset\n     */\n    drawElements(mode, count, type, offset) {\n        const { gl } = this;\n        gl.drawElements(mode, count, type, offset);\n    }\n    /**\n     * ```\n     * gl.drawArrays(mode, first, count);\n     * ```\n     *\n     * @param name\n     * @returns\n     */\n    getExtension(name) {\n        const { gl } = this;\n        return gl.getExtension(name);\n    }\n    /**\n     * ```\n     * gl.createVertexArray();\n     * ```\n     *\n     * @returns\n     */\n    createVertexArray() {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        return gl.createVertexArray();\n    }\n    /**\n     * ```\n     * gl.bindVertexArray(vertexArray);\n     * ```\n     *\n     * @param vertexArray\n     */\n    bindVertexArray(vertexArray) {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        gl.bindVertexArray(vertexArray);\n    }\n    /**\n     * ```\n     * gl.getAttribLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getAttribLocation(program, name) {\n        const { gl } = this;\n        return gl.getAttribLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.getUniformLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getUniformLocation(program, name) {\n        const { gl } = this;\n        return gl.getUniformLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.enableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    enableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.enableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.disableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    disableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.disableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.createShader(type);\n     * ```\n     *\n     * @param type\n     * @returns\n     */\n    createShader(type) {\n        const { gl } = this;\n        return gl.createShader(type);\n    }\n    /**\n     * ```\n     * gl.compileShader(shader);\n     * ```\n     *\n     * @param shader\n     * @returns\n     */\n    compileShader(shader) {\n        const { gl } = this;\n        gl.compileShader(shader);\n    }\n    /**\n     * ```\n     * gl.attachShader(program, shader);\n     * ```\n     *\n     * @param program\n     * @param shader\n     */\n    attachShader(program, shader) {\n        const { gl } = this;\n        gl.attachShader(program, shader);\n    }\n    /**\n     * ```\n     * gl.linkProgram(program);\n     * ```\n     *\n     * @param program\n     */\n    linkProgram(program) {\n        const { gl } = this;\n        gl.linkProgram(program);\n    }\n    /**\n     * ```\n     * gl.deleteProgram(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteProgram(shader) {\n        const { gl } = this;\n        gl.deleteProgram(shader);\n    }\n    /**\n     * ```\n     * gl.getShaderParameter(shader, pname);\n     * ```\n     *\n     * @param shader\n     * @param pname\n     */\n    getShaderParameter(shader, pname) {\n        const { gl } = this;\n        return gl.getShaderParameter(shader, pname);\n    }\n    /**\n     * ```\n     * gl.getShaderInfoLog(shader);\n     * ```\n     *\n     * @param shader\n     */\n    getShaderInfoLog(shader) {\n        const { gl } = this;\n        return gl.getShaderInfoLog(shader);\n    }\n    /**\n     * ```\n     * gl.createProgram();\n     * ```\n     *\n     * @returns\n     */\n    createProgram() {\n        const { gl } = this;\n        return gl.createProgram();\n    }\n    /**\n     * ```\n     * gl.getProgramParameter(program, pname);\n     * ```\n     *\n     * @param program\n     * @param pname\n     * @returns\n     */\n    getProgramParameter(program, pname) {\n        const { gl } = this;\n        return gl.getProgramParameter(program, pname);\n    }\n    /**\n     * ```\n     * gl.getProgramInfoLog(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    getProgramInfoLog(program) {\n        const { gl } = this;\n        return gl.getProgramInfoLog(program);\n    }\n    /**\n     * ```\n     * gl.shaderSource(shader, source);\n     * ```\n     *\n     * @param shader\n     * @param source\n     */\n    shaderSource(shader, source) {\n        const { gl } = this;\n        gl.shaderSource(shader, source);\n    }\n    /**\n     * ```\n     * gl.deleteShader(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteShader(shader) {\n        const { gl } = this;\n        gl.deleteShader(shader);\n    }\n}\n/**\n * Compare two arrays for equality.\n *\n * @remarks\n * This function will not try to compare nested arrays or Float32Arrays and\n * instead will always return false when they are encountered.\n *\n * @param a\n * @param b\n * @returns\n */\nexport function compareArrays(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((v, i) => {\n        // Don't bother to compare nested arrays or Float32Arrays\n        if (Array.isArray(v) || v instanceof Float32Array) {\n            return false;\n        }\n        else {\n            return v === b[i];\n        }\n    });\n}\n//# sourceMappingURL=WebGlContextWrapper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generic WebGL Utility Functions\n *\n * @remarks\n * Nothing here should be coupled to Renderer logic / types.\n *\n * @param gl\n * @returns\n */\nexport function isWebGl2(gl) {\n    return (self.WebGL2RenderingContext && gl instanceof self.WebGL2RenderingContext);\n}\n//# sourceMappingURL=WebGlUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\nexport class RenderTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = RenderTexture.resolveDefaults(props || {});\n    }\n    get width() {\n        return this.props.width;\n    }\n    set width(value) {\n        this.props.width = value;\n    }\n    get height() {\n        return this.props.height;\n    }\n    set height(value) {\n        this.props.height = value;\n    }\n    async getTextureData() {\n        return {\n            data: null,\n            premultiplyAlpha: null,\n        };\n    }\n    static resolveDefaults(props) {\n        return {\n            width: props.width || 256,\n            height: props.height || 256,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=RenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxRenderTexture extends WebGlCoreCtxTexture {\n    framebuffer;\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n        // Create Framebuffer object\n        const framebuffer = glw.createFramebuffer();\n        assertTruthy(framebuffer, 'Unable to create framebuffer');\n        this.framebuffer = framebuffer;\n    }\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        const nativeTexture = (this._nativeCtxTexture =\n            this.createNativeCtxTexture());\n        const { width, height } = this.textureSource;\n        // Set the dimensions of the render texture\n        glw.texImage2D(0, glw.RGBA, width, height, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        // Update the texture memory manager\n        memManager.setTextureMemUse(this, width * height * 4);\n        // Bind the framebuffer\n        glw.bindFramebuffer(this.framebuffer);\n        // Attach the texture to the framebuffer\n        glw.framebufferTexture2D(glw.COLOR_ATTACHMENT0, nativeTexture, 0);\n        // Unbind the framebuffer\n        glw.bindFramebuffer(null);\n        return {\n            width,\n            height,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxRenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, createWebGLContext, hasOwn, mergeColorAlphaPremultiplied, } from '../../../utils.js';\nimport { CoreRenderer } from '../CoreRenderer.js';\nimport { WebGlCoreRenderOp } from './WebGlCoreRenderOp.js';\nimport { createIndexBuffer, getWebGlParameters, getWebGlExtensions, } from './internal/RendererUtils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nimport { Texture } from '../../textures/Texture.js';\nimport { ColorTexture } from '../../textures/ColorTexture.js';\nimport { SubTexture } from '../../textures/SubTexture.js';\nimport { WebGlCoreCtxSubTexture } from './WebGlCoreCtxSubTexture.js';\nimport { CoreShaderManager } from '../../CoreShaderManager.js';\nimport { BufferCollection } from './internal/BufferCollection.js';\nimport { compareRect, getNormalizedRgbaComponents, } from '../../lib/utils.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nimport { RoundedRectangle } from './shaders/RoundedRectangle.js';\nimport { ContextSpy } from '../../lib/ContextSpy.js';\nimport { WebGlContextWrapper } from '../../lib/WebGlContextWrapper.js';\nimport { RenderTexture } from '../../textures/RenderTexture.js';\nimport { WebGlCoreCtxRenderTexture } from './WebGlCoreCtxRenderTexture.js';\nconst WORDS_PER_QUAD = 24;\nconst BYTES_PER_QUAD = WORDS_PER_QUAD * 4;\nexport class WebGlCoreRenderer extends CoreRenderer {\n    //// WebGL Native Context and Data\n    glw;\n    system;\n    //// Core Managers\n    txManager;\n    txMemManager;\n    shManager;\n    //// Options\n    options;\n    //// Persistent data\n    quadBuffer = new ArrayBuffer(1024 * 1024 * 4);\n    fQuadBuffer = new Float32Array(this.quadBuffer);\n    uiQuadBuffer = new Uint32Array(this.quadBuffer);\n    renderOps = [];\n    //// Render Op / Buffer Filling State\n    curBufferIdx = 0;\n    curRenderOp = null;\n    rttNodes = [];\n    activeRttNode = null;\n    //// Default Shader\n    defaultShader;\n    quadBufferCollection;\n    /**\n     * White pixel texture used by default when no texture is specified.\n     */\n    defaultTexture;\n    /**\n     * Whether the renderer is currently rendering to a texture.\n     */\n    renderToTextureActive = false;\n    constructor(options) {\n        super(options.stage);\n        const { canvas, clearColor, bufferMemory } = options;\n        this.options = options;\n        this.txManager = options.txManager;\n        this.txMemManager = options.txMemManager;\n        this.shManager = options.shManager;\n        this.defaultTexture = new ColorTexture(this.txManager);\n        // When the default texture is loaded, request a render in case the\n        // RAF is paused. Fixes: https://github.com/lightning-js/renderer/issues/123\n        this.defaultTexture.once('loaded', () => {\n            this.stage.requestRender();\n        });\n        const gl = createWebGLContext(canvas, options.contextSpy);\n        const glw = (this.glw = new WebGlContextWrapper(gl));\n        const color = getNormalizedRgbaComponents(clearColor);\n        glw.viewport(0, 0, canvas.width, canvas.height);\n        glw.clearColor(color[0], color[1], color[2], color[3]);\n        glw.setBlend(true);\n        glw.blendFunc(glw.ONE, glw.ONE_MINUS_SRC_ALPHA);\n        createIndexBuffer(glw, bufferMemory);\n        this.system = {\n            parameters: getWebGlParameters(this.glw),\n            extensions: getWebGlExtensions(this.glw),\n        };\n        this.shManager.renderer = this;\n        this.defaultShader = this.shManager.loadShader('DefaultShader').shader;\n        const quadBuffer = glw.createBuffer();\n        assertTruthy(quadBuffer);\n        const stride = 6 * Float32Array.BYTES_PER_ELEMENT;\n        this.quadBufferCollection = new BufferCollection([\n            {\n                buffer: quadBuffer,\n                attributes: {\n                    a_position: {\n                        name: 'a_position',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 0, // start at the beginning of the buffer\n                    },\n                    a_textureCoordinate: {\n                        name: 'a_textureCoordinate',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 2 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_color: {\n                        name: 'a_color',\n                        size: 4,\n                        type: glw.UNSIGNED_BYTE,\n                        normalized: true,\n                        stride,\n                        offset: 4 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_textureIndex: {\n                        name: 'a_textureIndex',\n                        size: 1,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 5 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                },\n            },\n        ]);\n    }\n    reset() {\n        const { glw } = this;\n        this.curBufferIdx = 0;\n        this.curRenderOp = null;\n        this.renderOps.length = 0;\n        glw.setScissorTest(false);\n        glw.clear();\n    }\n    getShaderManager() {\n        return this.shManager;\n    }\n    createCtxTexture(textureSource) {\n        if (textureSource instanceof SubTexture) {\n            return new WebGlCoreCtxSubTexture(this.glw, this.txMemManager, textureSource);\n        }\n        else if (textureSource instanceof RenderTexture) {\n            return new WebGlCoreCtxRenderTexture(this.glw, this.txMemManager, textureSource);\n        }\n        return new WebGlCoreCtxTexture(this.glw, this.txMemManager, textureSource);\n    }\n    /**\n     * This function adds a quad (a rectangle composed of two triangles) to the WebGL rendering pipeline.\n     *\n     * It takes a set of options that define the quad's properties, such as its dimensions, colors, texture, shader, and transformation matrix.\n     * The function first updates the shader properties with the current dimensions if necessary, then sets the default texture if none is provided.\n     * It then checks if a new render operation is needed, based on the current shader and clipping rectangle.\n     * If a new render operation is needed, it creates one and updates the current render operation.\n     * The function then adjusts the texture coordinates based on the texture options and adds the texture to the texture manager.\n     *\n     * Finally, it calculates the vertices for the quad, taking into account any transformations, and adds them to the quad buffer.\n     * The function updates the length and number of quads in the current render operation, and updates the current buffer index.\n     */\n    addQuad(params) {\n        const { fQuadBuffer, uiQuadBuffer } = this;\n        const { width, height, colorTl, colorTr, colorBl, colorBr, textureOptions, shader, shaderProps, alpha, clippingRect, tx, ty, ta, tb, tc, td, rtt: renderToTexture, parentHasRenderTexture, framebufferDimensions, } = params;\n        let { texture } = params;\n        /**\n         * If the shader props contain any automatic properties, update it with the\n         * current dimensions that will be used to render the quad.\n         */\n        if (shaderProps && hasOwn(shaderProps, '$dimensions')) {\n            const dimensions = shaderProps.$dimensions;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            dimensions.width = width;\n            dimensions.height = height;\n        }\n        texture = texture ?? this.defaultTexture;\n        assertTruthy(texture instanceof Texture, 'Invalid texture type');\n        let { curBufferIdx: bufferIdx, curRenderOp } = this;\n        const targetDims = {\n            width,\n            height,\n        };\n        const targetShader = shader || this.defaultShader;\n        assertTruthy(targetShader instanceof WebGlCoreShader);\n        if (!this.reuseRenderOp(params)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.newRenderOp(targetShader, shaderProps, alpha, targetDims, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions);\n            curRenderOp = this.curRenderOp;\n            assertTruthy(curRenderOp);\n        }\n        const flipX = textureOptions?.flipX ?? false;\n        const flipY = textureOptions?.flipY ?? false;\n        let texCoordX1 = 0;\n        let texCoordY1 = 0;\n        let texCoordX2 = 1;\n        let texCoordY2 = 1;\n        if (texture instanceof SubTexture) {\n            const { x: tx, y: ty, width: tw, height: th } = texture.props;\n            const { width: parentW = 0, height: parentH = 0 } = texture.parentTexture\n                .dimensions || { width: 0, height: 0 };\n            texCoordX1 = tx / parentW;\n            texCoordX2 = texCoordX1 + tw / parentW;\n            texCoordY1 = ty / parentH;\n            texCoordY2 = texCoordY1 + th / parentH;\n            texture = texture.parentTexture;\n        }\n        // Flip texture coordinates if dictated by texture options\n        if (flipX) {\n            [texCoordX1, texCoordX2] = [texCoordX2, texCoordX1];\n        }\n        if (flipY) {\n            [texCoordY1, texCoordY2] = [texCoordY2, texCoordY1];\n        }\n        const { txManager } = this.stage;\n        const ctxTexture = txManager.getCtxTexture(texture);\n        assertTruthy(ctxTexture instanceof WebGlCoreCtxTexture);\n        const textureIdx = this.addTexture(ctxTexture, bufferIdx);\n        curRenderOp = this.curRenderOp;\n        assertTruthy(curRenderOp);\n        // render quad advanced\n        if (tb !== 0 || tc !== 0) {\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta;\n            fQuadBuffer[bufferIdx++] = ty + width * tc;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + width * tc + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        else {\n            // Calculate the right corner of the quad\n            // multiplied by the scale\n            const rightCornerX = tx + width * ta;\n            const rightCornerY = ty + height * td;\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = ty;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        // Update the length of the current render op\n        curRenderOp.length += WORDS_PER_QUAD;\n        curRenderOp.numQuads++;\n        this.curBufferIdx = bufferIdx;\n    }\n    /**\n     * Replace the existing RenderOp with a new one that uses the specified Shader\n     * and starts at the specified buffer index.\n     *\n     * @param shader\n     * @param bufferIdx\n     */\n    newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        const curRenderOp = new WebGlCoreRenderOp(this.glw, this.options, this.quadBufferCollection, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, 0, // Z-Index is only used for explictly added Render Ops\n        renderToTexture, parentHasRenderTexture, framebufferDimensions);\n        this.curRenderOp = curRenderOp;\n        this.renderOps.push(curRenderOp);\n    }\n    /**\n     * Add a texture to the current RenderOp. If the texture cannot be added to the\n     * current RenderOp, a new RenderOp will be created and the texture will be added\n     * to that one.\n     *\n     * If the texture cannot be added to the new RenderOp, an error will be thrown.\n     *\n     * @param texture\n     * @param bufferIdx\n     * @param recursive\n     * @returns Assigned Texture Index of the texture in the render op\n     */\n    addTexture(texture, bufferIdx, recursive) {\n        const { curRenderOp } = this;\n        assertTruthy(curRenderOp);\n        const textureIdx = curRenderOp.addTexture(texture);\n        // TODO: Refactor to be more DRY\n        if (textureIdx === 0xffffffff) {\n            if (recursive) {\n                throw new Error('Unable to add texture to render op');\n            }\n            const { shader, shaderProps, dimensions, clippingRect, alpha } = curRenderOp;\n            this.newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx);\n            return this.addTexture(texture, bufferIdx, true);\n        }\n        return textureIdx;\n    }\n    /**\n     * Test if the current Render operation can be reused for the specified parameters.\n     * @param params\n     * @returns\n     */\n    reuseRenderOp(params) {\n        const { shader, shaderProps, parentHasRenderTexture, rtt, clippingRect } = params;\n        const targetShader = shader || this.defaultShader;\n        // Switching shader program will require a new render operation\n        if (this.curRenderOp?.shader !== targetShader) {\n            return false;\n        }\n        // Switching clipping rect will require a new render operation\n        if (!compareRect(this.curRenderOp.clippingRect, clippingRect)) {\n            return false;\n        }\n        // Force new render operation if rendering to texture\n        // @todo: This needs to be improved, render operations could also be reused\n        // for rendering to texture\n        if (parentHasRenderTexture || rtt) {\n            return false;\n        }\n        // Check if the shader can batch the shader properties\n        if (this.curRenderOp.shader !== this.defaultShader &&\n            (!shaderProps ||\n                !this.curRenderOp.shader.canBatchShaderProps(this.curRenderOp.shaderProps, shaderProps))) {\n            return false;\n        }\n        // Render operation can be reused\n        return true;\n    }\n    /**\n     * add RenderOp to the render pipeline\n     */\n    addRenderOp(renderable) {\n        this.renderOps.push(renderable);\n        this.curRenderOp = null;\n    }\n    /**\n     * Render the current set of RenderOps to render to the specified surface.\n     *\n     * TODO: 'screen' is the only supported surface at the moment.\n     *\n     * @param surface\n     */\n    render(surface = 'screen') {\n        const { glw, quadBuffer } = this;\n        const arr = new Float32Array(quadBuffer, 0, this.curBufferIdx);\n        const buffer = this.quadBufferCollection.getBuffer('a_position') ?? null;\n        glw.arrayBufferData(buffer, arr, glw.STATIC_DRAW);\n        const doLog = false; // idx++ % 100 === 0;\n        if (doLog) {\n            console.log('renderOps', this.renderOps.length);\n        }\n        this.renderOps.forEach((renderOp, i) => {\n            if (doLog) {\n                console.log('Quads per operation', renderOp.numQuads);\n            }\n            renderOp.draw();\n        });\n    }\n    renderToTexture(node) {\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            if (this.rttNodes[i] === node) {\n                return;\n            }\n        }\n        // @todo: Better bottom up rendering order\n        this.rttNodes.unshift(node);\n    }\n    renderRTTNodes() {\n        const { glw } = this;\n        const { txManager } = this.stage;\n        // Render all associated RTT nodes to their textures\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            const node = this.rttNodes[i];\n            // Skip nodes that don't have RTT updates\n            if (!node || !node.hasRTTupdates) {\n                continue;\n            }\n            // Set the active RTT node to the current node\n            // So we can prevent rendering children of nested RTT nodes\n            this.activeRttNode = node;\n            assertTruthy(node.texture, 'RTT node missing texture');\n            const ctxTexture = txManager.getCtxTexture(node.texture);\n            assertTruthy(ctxTexture instanceof WebGlCoreCtxRenderTexture);\n            this.renderToTextureActive = true;\n            // Bind the the texture's framebuffer\n            glw.bindFramebuffer(ctxTexture.framebuffer);\n            glw.viewport(0, 0, ctxTexture.w, ctxTexture.h);\n            glw.clear();\n            // Render all associated quads to the texture\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (!child) {\n                    continue;\n                }\n                child.update(this.stage.deltaTime, {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    valid: false,\n                });\n                this.stage.addQuads(child);\n                child.hasRTTupdates = false;\n            }\n            // Render all associated quads to the texture\n            this.render();\n            // Reset render operations\n            this.renderOps.length = 0;\n            node.hasRTTupdates = false;\n        }\n        // Bind the default framebuffer\n        glw.bindFramebuffer(null);\n        glw.viewport(0, 0, this.glw.canvas.width, this.glw.canvas.height);\n        this.renderToTextureActive = false;\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const SpecialCodepoints = {\n    LINE_FEED: 0x0a,\n    CARRIAGE_RETURN: 0x0d,\n    SPACE: 0x20,\n    TAB: 0x09,\n    ZERO_WIDTH_SPACE: 0x200b,\n    ZERO_WIDTH_NON_JOINER: 0x200c,\n    ZERO_WIDTH_JOINER: 0x200d,\n    LEFT_TO_RIGHT_MARK: 0x200e,\n    RIGHT_TO_LEFT_MARK: 0x200f,\n    LEFT_TO_RIGHT_EMBEDDING: 0x202a,\n    RIGHT_TO_LEFT_EMBEDDING: 0x202b,\n    POP_DIRECTIONAL_FORMATTING: 0x202c,\n    LEFT_TO_RIGHT_OVERRIDE: 0x202d,\n    RIGHT_TO_LEFT_OVERRIDE: 0x202e,\n    LINE_SEPARATOR: 0x2028,\n    PARAGRAPH_SEPARATOR: 0x2029,\n    OBJECT_REPLACEMENT_CHARACTER: 0xfffc,\n    REPLACEMENT_CHARACTER: 0xfffd,\n    ZERO_WIDTH_NO_BREAK_SPACE: 0xfeff,\n    LEFT_TO_RIGHT_ISOLATE: 0x2066,\n    RIGHT_TO_LEFT_ISOLATE: 0x2067,\n    FIRST_STRONG_ISOLATE: 0x2068,\n    POP_DIRECTIONAL_ISOLATE: 0x2069,\n    INHIBIT_SYMMETRIC_SWAPPING: 0x206a,\n    ACTIVATE_SYMMETRIC_SWAPPING: 0x206b,\n    INHIBIT_ARABIC_FORM_SHAPING: 0x206c,\n    ACTIVATE_ARABIC_FORM_SHAPING: 0x206d,\n    NATIONAL_DIGIT_SHAPES: 0x206e,\n    NOMINAL_DIGIT_SHAPES: 0x206f,\n    LEFT_TO_RIGHT_BOUNDARY: 0x200e,\n    RIGHT_TO_LEFT_BOUNDARY: 0x200f,\n};\n//# sourceMappingURL=SpecialCodepoints.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class FontShaper {\n}\n//# sourceMappingURL=FontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SpecialCodepoints } from '../../../renderers/SdfTextRenderer/internal/SpecialCodepoints.js';\nimport { FontShaper, } from './FontShaper.js';\nexport class SdfFontShaper extends FontShaper {\n    data;\n    glyphMap;\n    kernings;\n    constructor(data, glyphMap) {\n        super();\n        this.data = data;\n        this.glyphMap = glyphMap;\n        const kernings = (this.kernings = {});\n        data.kernings.forEach((kerning) => {\n            const second = kerning.second;\n            const firsts = (kernings[second] = kernings[second] || {});\n            firsts[kerning.first] = kerning.amount;\n        });\n        this.kernings = kernings;\n    }\n    *shapeText(props, codepoints) {\n        let codepointResult;\n        let lastGlyphId = undefined;\n        while ((codepointResult = codepoints.peek()) && !codepointResult.done) {\n            const codepoint = codepointResult.value;\n            const glyph = this.glyphMap.get(codepoint);\n            codepoints.next();\n            if (glyph !== undefined) {\n                // We found a glyph for this codepoint\n                // Yield the mapped glyph info\n                /**\n                 * Kerning includes any possible additional letter spacing\n                 */\n                const kerning = lastGlyphId !== undefined\n                    ? (this.kernings[glyph.id]?.[lastGlyphId] || 0) +\n                        props.letterSpacing\n                    : 0;\n                lastGlyphId = glyph.id;\n                yield {\n                    mapped: true,\n                    glyphId: glyph.id,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                    xAdvance: glyph.xadvance + kerning,\n                    yAdvance: 0,\n                    xOffset: glyph.xoffset + kerning,\n                    yOffset: glyph.yoffset,\n                    xBearing: 0,\n                    yBearing: 0,\n                    width: glyph.width,\n                    height: glyph.height,\n                };\n            }\n            else {\n                // We didn't find a glyph for this codepoint\n                // Yield the unmapped codepoint info\n                // If this codepoint is a linebreak, we should reset the last glyph id\n                // so that the next glyph will not be kerned with the last glyph of the\n                // previous line.\n                if (codepoint === SpecialCodepoints.LINE_FEED) {\n                    lastGlyphId = undefined;\n                }\n                yield {\n                    mapped: false,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                };\n            }\n        }\n    }\n}\n//# sourceMappingURL=SdfFontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// import type { Renderer } from '../../../Renderer';\nimport { assertTruthy } from '../../../../utils.js';\nimport { WebGlCoreRenderer } from '../../../renderers/webgl/WebGlCoreRenderer.js';\nimport { ImageTexture } from '../../../textures/ImageTexture.js';\nimport { TrFontFace } from '../TrFontFace.js';\nimport { SdfFontShaper } from './internal/SdfFontShaper.js';\nexport class SdfTrFontFace extends TrFontFace {\n    type;\n    texture;\n    /**\n     * Height of the tallest character in the font including the whitespace above it\n     */\n    maxCharHeight = 0;\n    data;\n    shaper;\n    glyphMap = new Map();\n    constructor(fontFamily, descriptors, type, stage, atlasUrl, atlasDataUrl) {\n        super(fontFamily, descriptors);\n        this.type = type;\n        const renderer = stage.renderer;\n        assertTruthy(renderer instanceof WebGlCoreRenderer, 'SDF Font Faces can only be used with the WebGL Renderer');\n        this.texture = stage.txManager.loadTexture('ImageTexture', {\n            src: atlasUrl,\n            // IMPORTANT: The SDF shader requires the alpha channel to NOT be\n            // premultiplied on the atlas texture. If it is premultiplied, the\n            // rendering of SDF glyphs (especially single-channel SDF fonts) will\n            // be very jagged.\n            premultiplyAlpha: false,\n        }, {\n            preload: true,\n        });\n        this.texture.on('loaded', () => {\n            this.checkLoaded();\n        });\n        // Set this.data to the fetched data from dataUrl\n        fetch(atlasDataUrl)\n            .then(async (response) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.data = await response.json();\n            // Add all the glyphs to the glyph map\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let maxCharHeight = 0;\n            this.data.chars.forEach((glyph) => {\n                this.glyphMap.set(glyph.id, glyph);\n                const charHeight = glyph.yoffset + glyph.height;\n                if (charHeight > maxCharHeight) {\n                    maxCharHeight = charHeight;\n                }\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.maxCharHeight = maxCharHeight;\n            // We know `data` is defined here, because we just set it\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.shaper = new SdfFontShaper(this.data, this.glyphMap);\n            this.checkLoaded();\n        })\n            .catch(console.error);\n    }\n    getAtlasEntry(glyphId) {\n        const glyph = this.glyphMap.get(glyphId);\n        if (glyph === undefined) {\n            throw new Error(`Glyph ${glyphId} not found in font ${this.fontFamily}`);\n        }\n        return {\n            x: glyph.x,\n            y: glyph.y,\n            width: glyph.width,\n            height: glyph.height,\n        };\n    }\n    checkLoaded() {\n        if (this.loaded)\n            return;\n        if (this.texture.state === 'loaded' && this.data) {\n            this.loaded = true;\n            this.emit('loaded');\n        }\n    }\n}\n//# sourceMappingURL=SdfTrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class for Core extensions.\n *\n * @remarks\n * Core extensions are used to extend the Core Renderer with custom code such as\n * custom fonts, custom shaders, custom textures, custom animation functions,\n * and more.\n */\nexport class CoreExtension {\n}\n//# sourceMappingURL=CoreExtension.js.map"],"names":["assertTruthy","condition","message","hasOwn","obj","prop","Object","prototype","hasOwnProperty","call","isProductionEnvironment","BASE_URL","MODE","DEV","PROD","SSR","LEGACY","a","b","out","intersection","createBound","Math","max","x1","y1","min","x2","y2","x","y","width","height","rgba","color","r","floor","g","toFixed","bound","alpha","flipEndianess","newAlpha","trunc","rgba1","rgba2","p","r1","g1","b1","a1","r2","g2","b2","a2","round","bound1","bound2","EventEmitter","constructor","_defineProperty","this","on","event","listener","listeners","eventListeners","push","off","index","indexOf","splice","once","onceListener","target","data","emit","forEach","removeAllListeners","exports","CoreShader","makeCacheKey","props","resolveDefaults","createShader","glw","type","source","shader","Error","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","WebGlCoreShader","options","super","renderer","supportsIndexedTextures","webGl2","isWebGl2","requiredExtensions","webgl2Extensions","webgl1Extensions","glVersion","extensionName","getExtension","name","shaderSources","fragment","vertex","textureUnits","system","parameters","MAX_VERTEX_TEXTURE_IMAGE_UNITS","vertexSource","Function","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","vao","createVertexArray","bindVertexArray","attributeLocations","attributeBuffers","attributeNames","attributes","attributeName","location","getAttribLocation","buffer","createBuffer","uniformLocations","uniformTypes","uniforms","uniform","getUniformLocation","warn","bindBufferAttribute","attribute","enableVertexAttribArray","vertexAttribPointer","size","normalized","stride","offset","disableAttribute","disableVertexAttribArray","disableAttributes","loc","boundBufferCollection","canBatchShaderProps","propsA","propsB","bindRenderOp","renderOp","bindBufferCollection","buffers","textures","length","bindTextures","parentHasRenderTexture","renderToTexture","_ref","framebufferDimensions","setUniform","Float32Array","pixelRatio","canvas","dimensions","$dimensions","$alpha","bindProps","value","resolvedBuffer","getBuffer","resolvedInfo","getAttributeInfo","attach","useProgram","detach","Texture","txManager","Set","setRenderableOwner","owner","renderable","renderableOwners","add","delete","setState","state","args","loadedArgs","failedArgs","error","getNormalizedRgbaComponents","TrFontFace","fontFamily","descriptors","_objectSpread","style","weight","stretch","convertToCssFontFaceDescriptors","unicodeRange","variant","featureSettings","display","CoreContextTexture","memManager","textureSource","CoreRenderer","stage","CoreRenderOp","WebGlCoreRenderOp","shaderProps","clippingRect","bufferIdx","zIndex","maxTextures","getParameter","addTexture","texture","existingIdx","findIndex","t","newIdx","draw","shManager","useShader","quadIdx","valid","_this$clippingRect","canvasHeight","clipX","clipWidth","clipHeight","clipY","setScissorTest","scissor","drawElements","TRIANGLES","numQuads","UNSIGNED_SHORT","getWebGlParameters","params","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","MAX_TEXTURE_IMAGE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_ATTRIBS","MAX_VARYING_VECTORS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","keys","key","getWebGlExtensions","extensions","ANGLE_instanced_arrays","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBKIT_WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc_srgb","OES_vertex_array_object","memize","fn","head","tail","memoized","i","node","len","arguments","searchCache","next","prev","val","Array","apply","maxSize","clear","isPowerOfTwo","getTimingBezier","c","d","xc","xb","xa","yc","yb","ya","time","cbxd","dx","it","minT","maxT","memo","str","s","parts","substr","split","parseFloat","isNaN","hypot","sqrt","TRANSPARENT_TEXTURE_DATA","Uint8Array","WebGlCoreCtxTexture","ctxTexture","_state","load","_nativeCtxTexture","w","_w","h","_h","createNativeCtxTexture","onLoadRequest","then","catch","err","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$textureSource","textureData","_mipmaps$","_textureData$data","mipmaps","_textureData$data$wid","_width","_textureData$data$hei","_height","glInternalFormat","view","wrap","_callee$","_context","texImage2D","RGBA","UNSIGNED_BYTE","setTextureMemUse","byteLength","getTextureData","sent","abrupt","activeTexture","ImageBitmap","ImageData","bindTexture","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","generateMipmap","DataView","ArrayBuffer","compressedTexImage2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","stop","free","deleteTexture","nativeTexture","createTexture","ColorTexture","_this2","_callee2","pixelData32","pixelData8","_context2","Uint32Array","Uint8ClampedArray","SubTexture","parentTexture","loadTexture","txType","queueMicrotask","parentTx","onParentTxLoaded","onParentTxFailed","_this3","_callee3","_context3","WebGlCoreCtxSubTexture","_this4","_callee4","_props$data","_props$data2","_context4","BufferCollection","config","_this$config$find","find","item","_this$config$find2","WebGlContextWrapper","gl","WeakMap","activeTextureUnit","ACTIVE_TEXTURE","TEXTURE0","maxTextureUnits","texture2dUnits","fill","undefined","map","_","TEXTURE_BINDING_2D","scissorEnabled","isEnabled","SCISSOR_TEST","scissorBox","SCISSOR_BOX","scissorX","scissorY","scissorWidth","scissorHeight","blendEnabled","BLEND","blendSrcRgb","BLEND_SRC_RGB","blendDstRgb","BLEND_DST_RGB","blendSrcAlpha","BLEND_SRC_ALPHA","blendDstAlpha","BLEND_DST_ALPHA","boundArrayBuffer","ARRAY_BUFFER_BINDING","boundElementArrayBuffer","ELEMENT_ARRAY_BUFFER_BINDING","curProgram","CURRENT_PROGRAM","UNPACK_FLIP_Y_WEBGL","FLOAT","ONE","ONE_MINUS_SRC_ALPHA","STATIC_DRAW","DYNAMIC_DRAW","COLOR_ATTACHMENT0","self","WebGL2RenderingContext","textureUnit","TEXTURE_2D","_getActiveTexture","pname","param","texture2dParams","textureParams","get","set","level","internalFormat","widthOrFormat","heightOrType","borderOrSource","format","pixels","internalformat","border","viewport","clearColor","red","green","blue","enable","disable","setBlend","blend","blendFunc","src","dst","createFramebuffer","bindFramebuffer","framebuffer","FRAMEBUFFER","framebufferTexture2D","attachment","COLOR_BUFFER_BIT","arrayBufferData","usage","bindBuffer","ARRAY_BUFFER","bufferData","elementArrayBufferData","ELEMENT_ARRAY_BUFFER","programUniforms","Map","uniformArgs","every","v","isArray","compareArrays","mode","count","vertexArray","RenderTexture","_callee5","_context5","WebGlCoreCtxRenderTexture","_this5","_callee6","_this5$textureSource","_callee6$","_context6","WebGlCoreRenderer","quadBuffer","bufferMemory","txMemManager","defaultTexture","requestRender","contextSpy","antialias","depth","stencil","desynchronized","powerPreference","premultipliedAlpha","preserveDrawingBuffer","getContext","Proxy","increment","String","bind","createWebGLContext","maxQuads","indices","Uint16Array","j","createIndexBuffer","defaultShader","loadShader","BYTES_PER_ELEMENT","quadBufferCollection","a_position","a_textureCoordinate","a_color","a_textureIndex","reset","curBufferIdx","curRenderOp","renderOps","getShaderManager","createCtxTexture","addQuad","_texture","_textureOptions$flipX","_textureOptions$flipY","fQuadBuffer","uiQuadBuffer","colorTl","colorTr","colorBl","colorBr","textureOptions","tx","ty","ta","tb","tc","td","rtt","targetDims","targetShader","reuseRenderOp","newRenderOp","flipX","flipY","texCoordX1","texCoordY1","texCoordX2","texCoordY2","_texture$props","tw","th","_ref2","_ref2$width","parentW","_ref2$height","parentH","_ref3","_ref4","getCtxTexture","textureIdx","rightCornerX","rightCornerY","recursive","_this$curRenderOp","addRenderOp","render","surface","_this$quadBufferColle","arr","rttNodes","unshift","renderRTTNodes","hasRTTupdates","activeRttNode","renderToTextureActive","children","child","update","deltaTime","addQuads","SpecialCodepoints","FontShaper","SdfFontShaper","glyphMap","kernings","kerning","second","first","amount","shapeText","codepoints","_this6","_callee7","codepointResult","lastGlyphId","codepoint","glyph","_this6$kernings$glyph","_context7","peek","done","id","letterSpacing","mapped","glyphId","cluster","lastIndex","xAdvance","xadvance","yAdvance","xOffset","xoffset","yOffset","yoffset","xBearing","yBearing","atlasUrl","atlasDataUrl","_this7","preload","checkLoaded","fetch","_ref5","_callee8","response","maxCharHeight","_context8","json","chars","charHeight","shaper","_x","getAtlasEntry","loaded"],"mappings":"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","x_google_ignoreList":[13]}