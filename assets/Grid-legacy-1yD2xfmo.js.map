{"version":3,"file":"Grid-legacy-1yD2xfmo.js","sources":["../../src/pages/gridStyles.ts","../../src/pages/Grid.tsx","../../node_modules/.pnpm/@lightningtv+solid@1.6.6_solid-js@1.8.20/node_modules/@lightningtv/solid/src/primitives/createInfiniteItems.ts"],"sourcesContent":["import {\n  IntrinsicNodeStyleProps,\n  IntrinsicTextNodeStyleProps,\n  hexColor,\n} from \"@lightningtv/solid\";\nimport theme from \"theme\";\n\nconst ROW_HEIGHT = 50;\nexport default {\n  ProductRow: {\n    width: 500,\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: 40,\n    height: ROW_HEIGHT,\n    borderRadius: 16,\n    color: 0xffffff0d,\n    border: { color: 0x008085ff, width: 0 },\n    active: {\n      color: 0x39393cff,\n    },\n    focus: {\n      color: 0xf6f6f9ff,\n      border: { color: 0x008085ff, width: 6 },\n    },\n    transition: {\n      // leave easing blank to use default linear\n      x: { duration: 300 },\n      width: { duration: 300 },\n      alpha: { duration: 300 },\n    },\n  },\n  ProductText: {\n    fontSize: 20,\n    fontWeight: 600,\n    lineHeight: 24,\n    color: \"#f6f6f6\",\n    focus: {\n      color: 0x141417ff,\n    },\n  },\n  itemsContainer: {\n    width: theme.layout.screenW,\n    height: 600,\n    y: 180,\n    x: 180,\n    zIndex: 2,\n  },\n} as const;\n","import {\n  createEffect,\n  on,\n  createSignal,\n  createSelector,\n  Index,\n  onMount,\n} from \"solid-js\";\nimport { type ElementNode, View, Text } from \"@lightningtv/solid\";\nimport { Column, Row } from \"@lightningtv/solid-ui\";\nimport styles from \"./gridStyles\";\nimport { setGlobalBackground } from \"../state\";\nimport { createInfiniteItems } from \"@lightningtv/solid/primitives\";\n\ninterface ProductsResponse {\n  limit: number;\n  products: any[]; // You can replace 'any' with the actual type of your products\n  skip: number;\n  total: number;\n}\n\ninterface Product {\n  brand: string;\n  category: string;\n  description: string;\n  discountPercentage: number;\n  id: number;\n  images: string[];\n  price: number;\n  rating: number;\n  stock: number;\n  thumbnail: string;\n  title: string;\n}\n\nfunction ProductRow(props) {\n  return (\n    <View\n      y={props.y}\n      autofocus={props.autofocus}\n      style={styles.ProductRow}\n      forwardStates\n    >\n      <Text style={styles.ProductText}>{props.item.id}</Text>\n      <Text style={styles.ProductText}>{props.item.title}</Text>\n      <Text style={styles.ProductText}>{props.item.price}</Text>\n    </View>\n  );\n}\n\nconst Grid = () => {\n  let totalProducts = 100;\n  const [columnY, setcolumnY] = createSignal(0);\n  const isFirst = createSelector(() => 0);\n  const [rowIndex, setRowIndex] = createSignal(0);\n  const [items, setItems] = createSignal<Product[]>([]);\n  const [products, { setPage }] = createInfiniteItems<Product>((page) => {\n    return fetch(`https://dummyjson.com/products?limit=20&skip=${20 * page}`)\n      .then((res) => res.json())\n      .then((data: ProductsResponse) => {\n        totalProducts = data.total;\n        return data.products;\n      });\n  });\n\n  const EXTRA = 8;\n  // When rowIndex changes we create a sub array for the UI\n  createEffect(\n    on(\n      [products, rowIndex],\n      ([products, index]) => {\n        if (items().length - EXTRA > index) return;\n\n        setItems(products.slice(0, index + EXTRA));\n        if (index > products.length - 5) {\n          // Load more products\n          setPage((p) => p + 1);\n        }\n      },\n      { defer: true }\n    )\n  );\n\n  onMount(() => {\n    setGlobalBackground(\"#000000\");\n  });\n\n  function changeRow(elm, active, selectedIndex, lastSelectedIndex) {\n    setcolumnY((active.y || 0) * -1 + 50);\n    setRowIndex(selectedIndex);\n  }\n\n  return (\n    <View clipping style={styles.itemsContainer}>\n      <Column plinko y={columnY()} scroll=\"none\" onSelectedChanged={changeRow}>\n        <Index each={items()}>\n          {(item, i) => (\n            <ProductRow y={i * 50} item={item()} autofocus={isFirst(i)} />\n          )}\n        </Index>\n      </Column>\n    </View>\n  );\n};\n\nexport default Grid;\n","import {\n  type Accessor,\n  batch,\n  type Setter,\n  createComputed,\n  createResource,\n  createSignal,\n} from 'solid-js';\n\n// Adopted from https://github.com/solidjs-community/solid-primitives/blob/main/packages/pagination/src/index.ts\n// As we don't have intersection observer in Lightning, we can't use the original implementation\n\n/**\n * Provides an easy way to implement infinite items.\n *\n * ```ts\n * const [items, loader, { item, setItem, setItems, end, setEnd }] = createInfiniteScroll(fetcher);\n * ```\n * @param fetcher `(item: number) => Promise<T[]>`\n * @return `items()` is an accessor contains array of contents\n * @property `items.loading` is a boolean indicator for the loading state\n * @property `items.error` contains any error encountered\n * @method `page` is an accessor that contains page number\n * @method `setPage` allows to manually change the page number\n * @method `setItems` allows to manually change the contents of the item\n * @method `end` is a boolean indicator for end of the item\n * @method `setEnd` allows to manually change the end\n */\nexport function createInfiniteItems<T>(\n  fetcher: (item: number) => Promise<T[]>,\n): [\n  items: Accessor<T[]>,\n  options: {\n    page: Accessor<number>;\n    setPage: Setter<number>;\n    setItems: Setter<T[]>;\n    end: Accessor<boolean>;\n    setEnd: Setter<boolean>;\n  },\n] {\n  const [items, setItems] = createSignal<T[]>([]);\n  const [page, setPage] = createSignal(0);\n  const [end, setEnd] = createSignal(false);\n\n  const [contents] = createResource(page, fetcher);\n\n  createComputed(() => {\n    const content = contents();\n    if (!content) return;\n    batch(() => {\n      if (content.length === 0) setEnd(true);\n      setItems((p) => [...p, ...content]);\n    });\n  });\n\n  return [\n    items,\n    {\n      page,\n      setPage,\n      setItems,\n      end,\n      setEnd,\n    },\n  ];\n}\n"],"names":["styles","ProductRow","width","display","flexDirection","gap","height","borderRadius","color","border","active","focus","transition","x","duration","alpha","ProductText","fontSize","fontWeight","lineHeight","itemsContainer","theme","layout","screenW","y","zIndex","props","_$createComponent","View","autofocus","style","forwardStates","children","Text","item","id","title","price","Grid","_createSignal8","_slicedToArray","createSignal","columnY","setcolumnY","isFirst","createSelector","_createSignal10","rowIndex","setRowIndex","_createSignal12","items","setItems","_createInfiniteItems","fetcher","_createSignal2","_createSignal4","page","setPage","_createSignal6","end","setEnd","contents","createResource","createComputed","content","batch","length","p","createInfiniteItems","fetch","then","res","json","data","total","products","_createInfiniteItems2","changeRow","elm","selectedIndex","lastSelectedIndex","on","index","slice","defer","onMount","setGlobalBackground","clipping","Column","plinko","scroll","onSelectedChanged","Index","each","i"],"mappings":"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","x_google_ignoreList":[2]}