{"version":3,"file":"KeyHandling-PT33bShc.js","sources":["../../src/pages/KeyHandling.tsx"],"sourcesContent":["import { Text } from \"@lightningtv/solid\";\nimport { setGlobalBackground } from \"../state\";\nimport { Block } from \"../components\";\n\nconst KeyHandling = () => {\n  setGlobalBackground(\"#333\");\n  let myBlock;\n\n  return (\n    <>\n      <Text x={400} y={200} contain=\"both\" width={900}>\n        Move the block with the arrow keys, enter to change color, enterHold to reset color.\n        Open inspector to see console log messages. Use M to test release.\n      </Text>\n      <Block\n        ref={myBlock}\n        autofocus\n        x={1920/2 - 50}\n        y={1080/2 - 50}\n        isBlack={false}\n        color=\"#1212df\"\n        onMenu={() => {\n          // This will be called when you press M key, and keep being called until you release M key\n          return true;\n        }}\n        onMenuRelease={() => {\n          // This wont be logged until you release M key, and only called once even if held\n          console.log(\"menu release\");\n          return true;\n        }}\n        onUp={() => myBlock.y = Math.max(0, myBlock.y - 20)}\n        onDown={() => {\n          console.log(\"down press\");\n          myBlock.y = Math.min(1080, myBlock.y + 20)\n        }}\n        onDownRelease={() => {\n          console.log(\"down release\");\n        }}\n        onRight={() => myBlock.x = Math.min(1920, myBlock.x + 20)}\n        onLeft={() => {\n          myBlock.x = Math.max(200, myBlock.x - 20)\n          // need to return true so we dont open menu\n          return myBlock.x > 200;\n        }}\n        onEnterRelease={() => {\n          console.log(\"enter release / up\");\n        }}\n        onEnterHold={(e) => {\n          console.log(\"enter hold\");\n          myBlock.color = \"#1212df\";\n        }}\n        onEnter={() => {\n          console.log(\"enter down\");\n          myBlock.isBlack = !myBlock.isBlack;\n          if (myBlock.isBlack) { \n            myBlock.color = \"#ffffff\"\n          } else {\n            myBlock.color = \"#000000\";\n          }\n        }}\n      />\n      </>\n  );\n};\n\nexport default KeyHandling;\n"],"names":["KeyHandling","setGlobalBackground","myBlock","_$createComponent","Text","x","y","contain","width","children","Block","ref","r$","_ref$","autofocus","isBlack","color","onMenu","onMenuRelease","console","log","onUp","Math","max","onDown","min","onDownRelease","onRight","onLeft","onEnterRelease","onEnterHold","e","onEnter"],"mappings":";AAIA,MAAMA,cAAcA,MAAM;AACxBC,sBAAoB,SAAM;AACtBC,MAAAA;AAEJC,SAAAA,CAAAA,gBAEKC,MAAI;AAAA,IAACC,GAAG;AAAA,IAAKC,GAAG;AAAA,IAAKC,SAAO;AAAA,IAAQC,OAAO;AAAA,IAAGC,UAAA;AAAA,EAAA,CAAAN,GAAAA,gBAI9CO,OAAK;AAAA,IAAAC,IAAAC,IAAA;AAAA,UAAAC,QACCX;AAAO,aAAAW,uBAAAA,MAAAD,EAAA,IAAPV,UAAOU;AAAAA,IAAA;AAAA,IACZE,WAAS;AAAA,IACTT,GAAG,OAAK,IAAI;AAAA,IACZC,GAAG,OAAK,IAAI;AAAA,IACZS,SAAS;AAAA,IACTC,OAAK;AAAA,IACLC,QAAQA,MAAM;AAEL,aAAA;AAAA,IACT;AAAA,IACAC,eAAeA,MAAM;AAEnBC,cAAQC,IAAI,cAAc;AACnB,aAAA;AAAA,IACT;AAAA,IACAC,MAAMA,MAAMnB,QAAQI,IAAIgB,KAAKC,IAAI,GAAGrB,QAAQI,IAAI,EAAE;AAAA,IAClDkB,QAAQA,MAAM;AACZL,cAAQC,IAAI,YAAY;AACxBlB,cAAQI,IAAIgB,KAAKG,IAAI,MAAMvB,QAAQI,IAAI,EAAE;AAAA,IAC3C;AAAA,IACAoB,eAAeA,MAAM;AACnBP,cAAQC,IAAI,cAAc;AAAA,IAC5B;AAAA,IACAO,SAASA,MAAMzB,QAAQG,IAAIiB,KAAKG,IAAI,MAAMvB,QAAQG,IAAI,EAAE;AAAA,IACxDuB,QAAQA,MAAM;AACZ1B,cAAQG,IAAIiB,KAAKC,IAAI,KAAKrB,QAAQG,IAAI,EAAE;AAExC,aAAOH,QAAQG,IAAI;AAAA,IACrB;AAAA,IACAwB,gBAAgBA,MAAM;AACpBV,cAAQC,IAAI,oBAAoB;AAAA,IAClC;AAAA,IACAU,aAAcC,CAAM,MAAA;AAClBZ,cAAQC,IAAI,YAAY;AACxBlB,cAAQc,QAAQ;AAAA,IAClB;AAAA,IACAgB,SAASA,MAAM;AACbb,cAAQC,IAAI,YAAY;AAChBL,cAAAA,UAAU,CAACb,QAAQa;AAC3B,UAAIb,QAAQa,SAAS;AACnBb,gBAAQc,QAAQ;AAAA,MAAA,OACX;AACLd,gBAAQc,QAAQ;AAAA,MAAA;AAAA,IAClB;AAAA,EACF,CAAC,CAAA;AAIT;"}